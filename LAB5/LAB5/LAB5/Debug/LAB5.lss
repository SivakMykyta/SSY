
LAB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00001d48  00001ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001818  00800206  00800206  00001de2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000690c  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e25  00000000  00000000  00008bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002994  00000000  00000000  0000b9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa0  00000000  00000000  0000e384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fe9  00000000  00000000  0000ee24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002669  00000000  00000000  00010e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00013476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c2       	rjmp	.+1056   	; 0x456 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	af c2       	rjmp	.+1374   	; 0x5f0 <__vector_36>
      92:	00 00       	nop
      94:	91 c2       	rjmp	.+1314   	; 0x5b8 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c5 c1       	rjmp	.+906    	; 0x434 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e8 e4       	ldi	r30, 0x48	; 72
     14c:	fd e1       	ldi	r31, 0x1D	; 29
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a6 30       	cpi	r26, 0x06	; 6
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	a6 e0       	ldi	r26, 0x06	; 6
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ae 31       	cpi	r26, 0x1E	; 30
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	e7 d0       	rcall	.+462    	; 0x33e <main>
     170:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:
		return 0;
	};
	i2cStop();
	teplotaTMP = (buffer[0]<<8|buffer[1]);
	return (float)teplotaTMP/256;
}
     176:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <appDataReqBusy>
     17a:	08 95       	ret

0000017c <appSendData>:
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <appDataReqBusy>
     184:	81 11       	cpse	r24, r1
     186:	26 c0       	rjmp	.+76     	; 0x1d4 <appSendData+0x58>
     188:	c0 91 13 02 	lds	r28, 0x0213	; 0x800213 <appUartBufferPtr>
     18c:	cc 23       	and	r28, r28
     18e:	11 f1       	breq	.+68     	; 0x1d4 <appSendData+0x58>
     190:	4c 2f       	mov	r20, r28
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	64 e1       	ldi	r22, 0x14	; 20
     196:	72 e0       	ldi	r23, 0x02	; 2
     198:	81 e8       	ldi	r24, 0x81	; 129
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <memcpy>
     1a0:	ef ee       	ldi	r30, 0xEF	; 239
     1a2:	f2 e0       	ldi	r31, 0x02	; 2
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	96 83       	std	Z+6, r25	; 0x06
     1aa:	85 83       	std	Z+5, r24	; 0x05
     1ac:	d1 e0       	ldi	r29, 0x01	; 1
     1ae:	d7 83       	std	Z+7, r29	; 0x07
     1b0:	d0 87       	std	Z+8, r29	; 0x08
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	81 87       	std	Z+9, r24	; 0x09
     1b6:	81 e8       	ldi	r24, 0x81	; 129
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	93 87       	std	Z+11, r25	; 0x0b
     1bc:	82 87       	std	Z+10, r24	; 0x0a
     1be:	c4 87       	std	Z+12, r28	; 0x0c
     1c0:	8b eb       	ldi	r24, 0xBB	; 187
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	96 87       	std	Z+14, r25	; 0x0e
     1c6:	85 87       	std	Z+13, r24	; 0x0d
     1c8:	cf 01       	movw	r24, r30
     1ca:	06 d3       	rcall	.+1548   	; 0x7d8 <NWK_DataReq>
     1cc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <appUartBufferPtr>
     1d0:	d0 93 ee 02 	sts	0x02EE, r29	; 0x8002ee <appDataReqBusy>
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <appTimerHandler>:
     1da:	d0 cf       	rjmp	.-96     	; 0x17c <appSendData>
     1dc:	08 95       	ret

000001de <appTimerHandlerMOJ>:
     1de:	cf 93       	push	r28
     1e0:	ef ee       	ldi	r30, 0xEF	; 239
     1e2:	f2 e0       	ldi	r31, 0x02	; 2
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	96 83       	std	Z+6, r25	; 0x06
     1ea:	85 83       	std	Z+5, r24	; 0x05
     1ec:	c1 e0       	ldi	r28, 0x01	; 1
     1ee:	c7 83       	std	Z+7, r28	; 0x07
     1f0:	c0 87       	std	Z+8, r28	; 0x08
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	81 87       	std	Z+9, r24	; 0x09
     1f6:	84 e0       	ldi	r24, 0x04	; 4
     1f8:	92 e0       	ldi	r25, 0x02	; 2
     1fa:	93 87       	std	Z+11, r25	; 0x0b
     1fc:	82 87       	std	Z+10, r24	; 0x0a
     1fe:	c4 87       	std	Z+12, r28	; 0x0c
     200:	8b eb       	ldi	r24, 0xBB	; 187
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	96 87       	std	Z+14, r25	; 0x0e
     206:	85 87       	std	Z+13, r24	; 0x0d
     208:	cf 01       	movw	r24, r30
     20a:	e6 d2       	rcall	.+1484   	; 0x7d8 <NWK_DataReq>
     20c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <appUartBufferPtr>
     210:	c0 93 ee 02 	sts	0x02EE, r28	; 0x8002ee <appDataReqBusy>
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <appDataInd>:
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	63 97       	sbiw	r28, 0x13	; 19
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
     232:	7c 01       	movw	r14, r24
     234:	dc 01       	movw	r26, r24
     236:	17 96       	adiw	r26, 0x07	; 7
     238:	ed 91       	ld	r30, X+
     23a:	fc 91       	ld	r31, X
     23c:	18 97       	sbiw	r26, 0x08	; 8
     23e:	80 81       	ld	r24, Z
     240:	86 30       	cpi	r24, 0x06	; 6
     242:	29 f4       	brne	.+10     	; 0x24e <appDataInd+0x36>
     244:	19 96       	adiw	r26, 0x09	; 9
     246:	8c 91       	ld	r24, X
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	51 f4       	brne	.+20     	; 0x260 <appDataInd+0x48>
     24c:	0f c0       	rjmp	.+30     	; 0x26c <appDataInd+0x54>
     24e:	8f 34       	cpi	r24, 0x4F	; 79
     250:	39 f4       	brne	.+14     	; 0x260 <appDataInd+0x48>
     252:	81 81       	ldd	r24, Z+1	; 0x01
     254:	8b 34       	cpi	r24, 0x4B	; 75
     256:	21 f4       	brne	.+8      	; 0x260 <appDataInd+0x48>
     258:	f7 01       	movw	r30, r14
     25a:	81 85       	ldd	r24, Z+9	; 0x09
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	31 f0       	breq	.+12     	; 0x26c <appDataInd+0x54>
     260:	d7 01       	movw	r26, r14
     262:	19 96       	adiw	r26, 0x09	; 9
     264:	8c 91       	ld	r24, X
     266:	81 11       	cpse	r24, r1
     268:	04 c0       	rjmp	.+8      	; 0x272 <appDataInd+0x5a>
     26a:	12 c0       	rjmp	.+36     	; 0x290 <appDataInd+0x78>
     26c:	8c e7       	ldi	r24, 0x7C	; 124
     26e:	57 d1       	rcall	.+686    	; 0x51e <HAL_UartWriteByte>
     270:	2a c0       	rjmp	.+84     	; 0x2c6 <appDataInd+0xae>
     272:	10 e0       	ldi	r17, 0x00	; 0
     274:	d7 01       	movw	r26, r14
     276:	17 96       	adiw	r26, 0x07	; 7
     278:	ed 91       	ld	r30, X+
     27a:	fc 91       	ld	r31, X
     27c:	18 97       	sbiw	r26, 0x08	; 8
     27e:	e1 0f       	add	r30, r17
     280:	f1 1d       	adc	r31, r1
     282:	80 81       	ld	r24, Z
     284:	4c d1       	rcall	.+664    	; 0x51e <HAL_UartWriteByte>
     286:	1f 5f       	subi	r17, 0xFF	; 255
     288:	f7 01       	movw	r30, r14
     28a:	81 85       	ldd	r24, Z+9	; 0x09
     28c:	18 17       	cp	r17, r24
     28e:	90 f3       	brcs	.-28     	; 0x274 <appDataInd+0x5c>
     290:	8f e4       	ldi	r24, 0x4F	; 79
     292:	8a 8b       	std	Y+18, r24	; 0x12
     294:	8b e4       	ldi	r24, 0x4B	; 75
     296:	8b 8b       	std	Y+19, r24	; 0x13
     298:	d7 01       	movw	r26, r14
     29a:	8d 91       	ld	r24, X+
     29c:	9c 91       	ld	r25, X
     29e:	9f 83       	std	Y+7, r25	; 0x07
     2a0:	8e 83       	std	Y+6, r24	; 0x06
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	88 87       	std	Y+8, r24	; 0x08
     2a6:	89 87       	std	Y+9, r24	; 0x09
     2a8:	82 e0       	ldi	r24, 0x02	; 2
     2aa:	8a 87       	std	Y+10, r24	; 0x0a
     2ac:	9e 01       	movw	r18, r28
     2ae:	2e 5e       	subi	r18, 0xEE	; 238
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	3c 87       	std	Y+12, r19	; 0x0c
     2b4:	2b 87       	std	Y+11, r18	; 0x0b
     2b6:	8d 87       	std	Y+13, r24	; 0x0d
     2b8:	8b eb       	ldi	r24, 0xBB	; 187
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	9f 87       	std	Y+15, r25	; 0x0f
     2be:	8e 87       	std	Y+14, r24	; 0x0e
     2c0:	ce 01       	movw	r24, r28
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	89 d2       	rcall	.+1298   	; 0x7d8 <NWK_DataReq>
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	63 96       	adiw	r28, 0x13	; 19
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	08 95       	ret

000002e0 <HAL_UartBytesReceived>:
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	8c 01       	movw	r16, r24
     2ec:	89 2b       	or	r24, r25
     2ee:	c9 f0       	breq	.+50     	; 0x322 <HAL_UartBytesReceived+0x42>
     2f0:	c0 e0       	ldi	r28, 0x00	; 0
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
     2f4:	3b d1       	rcall	.+630    	; 0x56c <HAL_UartReadByte>
     2f6:	f8 2e       	mov	r15, r24
     2f8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <appUartBufferPtr>
     2fc:	8d 36       	cpi	r24, 0x6D	; 109
     2fe:	09 f4       	brne	.+2      	; 0x302 <HAL_UartBytesReceived+0x22>
     300:	3d df       	rcall	.-390    	; 0x17c <appSendData>
     302:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <appUartBufferPtr>
     306:	ed 36       	cpi	r30, 0x6D	; 109
     308:	40 f4       	brcc	.+16     	; 0x31a <HAL_UartBytesReceived+0x3a>
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	8e 0f       	add	r24, r30
     30e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <appUartBufferPtr>
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	ec 5e       	subi	r30, 0xEC	; 236
     316:	fd 4f       	sbci	r31, 0xFD	; 253
     318:	f0 82       	st	Z, r15
     31a:	21 96       	adiw	r28, 0x01	; 1
     31c:	0c 17       	cp	r16, r28
     31e:	1d 07       	cpc	r17, r29
     320:	49 f7       	brne	.-46     	; 0x2f4 <HAL_UartBytesReceived+0x14>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <SYS_TimerStop>
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	93 e0       	ldi	r25, 0x03	; 3
     32e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <SYS_TimerStart>
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	08 95       	ret

0000033e <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
SYS_Init();
     33e:	0e 94 a5 0c 	call	0x194a	; 0x194a <SYS_Init>
HAL_UartInit(38400);
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	76 e9       	ldi	r23, 0x96	; 150
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	94 d0       	rcall	.+296    	; 0x474 <HAL_UartInit>
HAL_UartWriteByte('a');
     34c:	81 e6       	ldi	r24, 0x61	; 97
     34e:	e7 d0       	rcall	.+462    	; 0x51e <HAL_UartWriteByte>
	//If (timeToStop)
	//SYS_TimerStop(timer);
}
static void startTimerMOJ(void)
{
	appTimerMOJ.interval = 2000;
     350:	e6 e0       	ldi	r30, 0x06	; 6
     352:	f2 e0       	ldi	r31, 0x02	; 2
     354:	80 ed       	ldi	r24, 0xD0	; 208
     356:	97 e0       	ldi	r25, 0x07	; 7
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	86 83       	std	Z+6, r24	; 0x06
     35e:	97 83       	std	Z+7, r25	; 0x07
     360:	a0 87       	std	Z+8, r26	; 0x08
     362:	b1 87       	std	Z+9, r27	; 0x09
	appTimerMOJ.mode = SYS_TIMER_PERIODIC_MODE;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	82 87       	std	Z+10, r24	; 0x0a
	appTimerMOJ.handler = appTimerHandlerMOJ;
     368:	8f ee       	ldi	r24, 0xEF	; 239
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	94 87       	std	Z+12, r25	; 0x0c
     36e:	83 87       	std	Z+11, r24	; 0x0b
	SYS_TimerStart(&appTimerMOJ);
     370:	cf 01       	movw	r24, r30
     372:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <SYS_TimerStart>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     376:	c0 e0       	ldi	r28, 0x00	; 0
     378:	d3 e0       	ldi	r29, 0x03	; 3
     37a:	0f 2e       	mov	r0, r31
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	8f 2e       	mov	r8, r31
     380:	91 2c       	mov	r9, r1
     382:	a1 2c       	mov	r10, r1
     384:	b1 2c       	mov	r11, r1
     386:	f0 2d       	mov	r31, r0
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     388:	0f 2e       	mov	r0, r31
     38a:	fd ee       	ldi	r31, 0xED	; 237
     38c:	ef 2e       	mov	r14, r31
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	ff 2e       	mov	r15, r31
     392:	f0 2d       	mov	r31, r0
void i2cInit(void){
	/* SCL freq 400kHz
	TWSR = 0x00; //preddelicka 1
	TWBR = 0x02; 
	*/
	TWCR = 1<<TWEN; //TWI enable
     394:	0c eb       	ldi	r16, 0xBC	; 188
     396:	10 e0       	ldi	r17, 0x00	; 0
HAL_UartWriteByte('a');
startTimerMOJ();

while (1)
{
SYS_TaskHandler();
     398:	0e 94 ac 0c 	call	0x1958	; 0x1958 <SYS_TaskHandler>
HAL_UartTaskHandler();
     39c:	80 d1       	rcall	.+768    	; 0x69e <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
switch (appState)
     39e:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <appState>
     3a2:	81 11       	cpse	r24, r1

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     3a4:	f9 cf       	rjmp	.-14     	; 0x398 <main+0x5a>
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
NWK_SetPanId(APP_PANID);
     3aa:	d3 d1       	rcall	.+934    	; 0x752 <NWK_SetAddr>
     3ac:	80 e3       	ldi	r24, 0x30	; 48
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	d7 d1       	rcall	.+942    	; 0x760 <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     3b2:	84 e0       	ldi	r24, 0x04	; 4
     3b4:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <PHY_SetRxState>

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     3be:	6c e0       	ldi	r22, 0x0C	; 12
     3c0:	71 e0       	ldi	r23, 0x01	; 1
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	d4 d1       	rcall	.+936    	; 0x76e <NWK_OpenEndpoint>

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     3c6:	8e 82       	std	Y+6, r8	; 0x06
     3c8:	9f 82       	std	Y+7, r9	; 0x07
     3ca:	a8 86       	std	Y+8, r10	; 0x08
     3cc:	b9 86       	std	Y+9, r11	; 0x09
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     3ce:	1a 86       	std	Y+10, r1	; 0x0a
appTimer.handler = appTimerHandler;
     3d0:	fc 86       	std	Y+12, r15	; 0x0c
     3d2:	eb 86       	std	Y+11, r14	; 0x0b
void i2cInit(void){
	/* SCL freq 400kHz
	TWSR = 0x00; //preddelicka 1
	TWBR = 0x02; 
	*/
	TWCR = 1<<TWEN; //TWI enable
     3d4:	84 e0       	ldi	r24, 0x04	; 4
     3d6:	f8 01       	movw	r30, r16
     3d8:	80 83       	st	Z, r24
switch (appState)
{
case APP_STATE_INITIAL:
{
appInit();
appState = APP_STATE_IDLE;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <appState>
     3e0:	db cf       	rjmp	.-74     	; 0x398 <main+0x5a>

000003e2 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     3e2:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	a8 95       	wdr
     3ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3ee:	88 61       	ori	r24, 0x18	; 24
     3f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     3f8:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     3fa:	e1 e6       	ldi	r30, 0x61	; 97
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 e8       	ldi	r24, 0x80	; 128
     400:	80 83       	st	Z, r24
  CLKPR = 0;
     402:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     404:	78 94       	sei

  HAL_TimerInit();
     406:	01 c0       	rjmp	.+2      	; 0x40a <HAL_TimerInit>
     408:	08 95       	ret

0000040a <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     40a:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <halTimerIrqCount>
     40e:	80 e1       	ldi	r24, 0x10	; 16
     410:	97 e2       	ldi	r25, 0x27	; 39
     412:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     416:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     41a:	e1 ea       	ldi	r30, 0xA1	; 161
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	88 e0       	ldi	r24, 0x08	; 8
     420:	80 83       	st	Z, r24
     422:	80 81       	ld	r24, Z
     424:	82 60       	ori	r24, 0x02	; 2
     426:	80 83       	st	Z, r24
     428:	e2 e7       	ldi	r30, 0x72	; 114
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	82 60       	ori	r24, 0x02	; 2
     430:	80 83       	st	Z, r24
     432:	08 95       	ret

00000434 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	8f 93       	push	r24
  halTimerIrqCount++;
     440:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <halTimerIrqCount>
     444:	8f 5f       	subi	r24, 0xFF	; 255
     446:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <halTimerIrqCount>
}
     44a:	8f 91       	pop	r24
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	1f 90       	pop	r1
     454:	18 95       	reti

00000456 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     456:	1f 92       	push	r1
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	0f 92       	push	r0
     45e:	11 24       	eor	r1, r1
     460:	8f 93       	push	r24
  halSleepTimerEvent = true;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <halSleepTimerEvent>
}
     468:	8f 91       	pop	r24
     46a:	0f 90       	pop	r0
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	0f 90       	pop	r0
     470:	1f 90       	pop	r1
     472:	18 95       	reti

00000474 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	aa 1f       	adc	r26, r26
     47e:	bb 1f       	adc	r27, r27
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	aa 1f       	adc	r26, r26
     486:	bb 1f       	adc	r27, r27
     488:	9c 01       	movw	r18, r24
     48a:	ad 01       	movw	r20, r26
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	44 1f       	adc	r20, r20
     492:	55 1f       	adc	r21, r21
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	44 1f       	adc	r20, r20
     49a:	55 1f       	adc	r21, r21
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	74 e2       	ldi	r23, 0x24	; 36
     4a0:	84 ef       	ldi	r24, 0xF4	; 244
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__udivmodsi4>
     4a8:	ba 01       	movw	r22, r20
     4aa:	a9 01       	movw	r20, r18
     4ac:	41 50       	subi	r20, 0x01	; 1
     4ae:	51 09       	sbc	r21, r1
     4b0:	61 09       	sbc	r22, r1
     4b2:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     4b4:	bb 27       	eor	r27, r27
     4b6:	a7 2f       	mov	r26, r23
     4b8:	96 2f       	mov	r25, r22
     4ba:	85 2f       	mov	r24, r21
     4bc:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
     4c0:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     4ca:	88 e9       	ldi	r24, 0x98	; 152
     4cc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
     4d0:	86 e0       	ldi	r24, 0x06	; 6
     4d2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
     4d6:	ed e3       	ldi	r30, 0x3D	; 61
     4d8:	f6 e0       	ldi	r31, 0x06	; 6
     4da:	8c ea       	ldi	r24, 0xAC	; 172
     4dc:	94 e0       	ldi	r25, 0x04	; 4
     4de:	91 87       	std	Z+9, r25	; 0x09
     4e0:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     4e2:	80 e9       	ldi	r24, 0x90	; 144
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	95 83       	std	Z+5, r25	; 0x05
     4e8:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     4ea:	17 82       	std	Z+7, r1	; 0x07
     4ec:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     4ee:	11 82       	std	Z+1, r1	; 0x01
     4f0:	10 82       	st	Z, r1
  txFifo.tail = 0;
     4f2:	13 82       	std	Z+3, r1	; 0x03
     4f4:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     4f6:	e2 ea       	ldi	r30, 0xA2	; 162
     4f8:	f4 e0       	ldi	r31, 0x04	; 4
     4fa:	21 e1       	ldi	r18, 0x11	; 17
     4fc:	33 e0       	ldi	r19, 0x03	; 3
     4fe:	31 87       	std	Z+9, r19	; 0x09
     500:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     502:	95 83       	std	Z+5, r25	; 0x05
     504:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     506:	17 82       	std	Z+7, r1	; 0x07
     508:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     50a:	11 82       	std	Z+1, r1	; 0x01
     50c:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     50e:	13 82       	std	Z+3, r1	; 0x03
     510:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <udrEmpty>
  newData = false;
     518:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <newData>
     51c:	08 95       	ret

0000051e <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     522:	ed e3       	ldi	r30, 0x3D	; 61
     524:	f6 e0       	ldi	r31, 0x06	; 6
     526:	26 81       	ldd	r18, Z+6	; 0x06
     528:	37 81       	ldd	r19, Z+7	; 0x07
     52a:	64 81       	ldd	r22, Z+4	; 0x04
     52c:	75 81       	ldd	r23, Z+5	; 0x05
     52e:	26 17       	cp	r18, r22
     530:	37 07       	cpc	r19, r23
     532:	c9 f0       	breq	.+50     	; 0x566 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     534:	c0 85       	ldd	r28, Z+8	; 0x08
     536:	d1 85       	ldd	r29, Z+9	; 0x09
     538:	42 81       	ldd	r20, Z+2	; 0x02
     53a:	53 81       	ldd	r21, Z+3	; 0x03
     53c:	da 01       	movw	r26, r20
     53e:	11 96       	adiw	r26, 0x01	; 1
     540:	b3 83       	std	Z+3, r27	; 0x03
     542:	a2 83       	std	Z+2, r26	; 0x02
     544:	fe 01       	movw	r30, r28
     546:	e4 0f       	add	r30, r20
     548:	f5 1f       	adc	r31, r21
     54a:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     54c:	6a 17       	cp	r22, r26
     54e:	7b 07       	cpc	r23, r27
     550:	21 f4       	brne	.+8      	; 0x55a <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     552:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <txFifo+0x3>
     556:	10 92 3f 06 	sts	0x063F, r1	; 0x80063f <txFifo+0x2>
  txFifo.bytes++;
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	30 93 44 06 	sts	0x0644, r19	; 0x800644 <txFifo+0x7>
     562:	20 93 43 06 	sts	0x0643, r18	; 0x800643 <txFifo+0x6>
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     56c:	4f b7       	in	r20, 0x3f	; 63
     56e:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     570:	e2 ea       	ldi	r30, 0xA2	; 162
     572:	f4 e0       	ldi	r31, 0x04	; 4
     574:	20 85       	ldd	r18, Z+8	; 0x08
     576:	31 85       	ldd	r19, Z+9	; 0x09
     578:	80 81       	ld	r24, Z
     57a:	91 81       	ldd	r25, Z+1	; 0x01
     57c:	bc 01       	movw	r22, r24
     57e:	6f 5f       	subi	r22, 0xFF	; 255
     580:	7f 4f       	sbci	r23, 0xFF	; 255
     582:	71 83       	std	Z+1, r23	; 0x01
     584:	60 83       	st	Z, r22
     586:	d9 01       	movw	r26, r18
     588:	a8 0f       	add	r26, r24
     58a:	b9 1f       	adc	r27, r25
     58c:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     58e:	60 81       	ld	r22, Z
     590:	71 81       	ldd	r23, Z+1	; 0x01
     592:	24 81       	ldd	r18, Z+4	; 0x04
     594:	35 81       	ldd	r19, Z+5	; 0x05
     596:	62 17       	cp	r22, r18
     598:	73 07       	cpc	r23, r19
     59a:	21 f4       	brne	.+8      	; 0x5a4 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     59c:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <rxFifo+0x1>
     5a0:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <rxFifo>
    rxFifo.bytes--;
     5a4:	e2 ea       	ldi	r30, 0xA2	; 162
     5a6:	f4 e0       	ldi	r31, 0x04	; 4
     5a8:	26 81       	ldd	r18, Z+6	; 0x06
     5aa:	37 81       	ldd	r19, Z+7	; 0x07
     5ac:	21 50       	subi	r18, 0x01	; 1
     5ae:	31 09       	sbc	r19, r1
     5b0:	37 83       	std	Z+7, r19	; 0x07
     5b2:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     5b4:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     5b6:	08 95       	ret

000005b8 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	0b b6       	in	r0, 0x3b	; 59
     5c4:	0f 92       	push	r0
     5c6:	8f 93       	push	r24
     5c8:	ef 93       	push	r30
     5ca:	ff 93       	push	r31
  udrEmpty = true;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     5d2:	e9 ec       	ldi	r30, 0xC9	; 201
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	8f 7d       	andi	r24, 0xDF	; 223
     5da:	80 83       	st	Z, r24
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	8f 91       	pop	r24
     5e2:	0f 90       	pop	r0
     5e4:	0b be       	out	0x3b, r0	; 59
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	0b b6       	in	r0, 0x3b	; 59
     5fc:	0f 92       	push	r0
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	6f 93       	push	r22
     608:	7f 93       	push	r23
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
     60e:	af 93       	push	r26
     610:	bf 93       	push	r27
     612:	ef 93       	push	r30
     614:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     616:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     61a:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     61e:	8c 71       	andi	r24, 0x1C	; 28
     620:	59 f5       	brne	.+86     	; 0x678 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     622:	e2 ea       	ldi	r30, 0xA2	; 162
     624:	f4 e0       	ldi	r31, 0x04	; 4
     626:	46 81       	ldd	r20, Z+6	; 0x06
     628:	57 81       	ldd	r21, Z+7	; 0x07
     62a:	84 81       	ldd	r24, Z+4	; 0x04
     62c:	95 81       	ldd	r25, Z+5	; 0x05
     62e:	48 17       	cp	r20, r24
     630:	59 07       	cpc	r21, r25
     632:	11 f1       	breq	.+68     	; 0x678 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     634:	40 85       	ldd	r20, Z+8	; 0x08
     636:	51 85       	ldd	r21, Z+9	; 0x09
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	bc 01       	movw	r22, r24
     63e:	6f 5f       	subi	r22, 0xFF	; 255
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	73 83       	std	Z+3, r23	; 0x03
     644:	62 83       	std	Z+2, r22	; 0x02
     646:	da 01       	movw	r26, r20
     648:	a8 0f       	add	r26, r24
     64a:	b9 1f       	adc	r27, r25
     64c:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     64e:	22 81       	ldd	r18, Z+2	; 0x02
     650:	33 81       	ldd	r19, Z+3	; 0x03
     652:	84 81       	ldd	r24, Z+4	; 0x04
     654:	95 81       	ldd	r25, Z+5	; 0x05
     656:	28 17       	cp	r18, r24
     658:	39 07       	cpc	r19, r25
     65a:	21 f4       	brne	.+8      	; 0x664 <__vector_36+0x74>
      rxFifo.tail = 0;
     65c:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <rxFifo+0x3>
     660:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <rxFifo+0x2>
    rxFifo.bytes++;
     664:	e2 ea       	ldi	r30, 0xA2	; 162
     666:	f4 e0       	ldi	r31, 0x04	; 4
     668:	86 81       	ldd	r24, Z+6	; 0x06
     66a:	97 81       	ldd	r25, Z+7	; 0x07
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	97 83       	std	Z+7, r25	; 0x07
     670:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	0b be       	out	0x3b, r0	; 59
     694:	0f 90       	pop	r0
     696:	0f be       	out	0x3f, r0	; 63
     698:	0f 90       	pop	r0
     69a:	1f 90       	pop	r1
     69c:	18 95       	reti

0000069e <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     69e:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <txFifo+0x6>
     6a2:	90 91 44 06 	lds	r25, 0x0644	; 0x800644 <txFifo+0x7>
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	69 f1       	breq	.+90     	; 0x704 <HAL_UartTaskHandler+0x66>
     6aa:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <udrEmpty>
     6ae:	22 23       	and	r18, r18
     6b0:	49 f1       	breq	.+82     	; 0x704 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     6b2:	ed e3       	ldi	r30, 0x3D	; 61
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	60 85       	ldd	r22, Z+8	; 0x08
     6b8:	71 85       	ldd	r23, Z+9	; 0x09
     6ba:	20 81       	ld	r18, Z
     6bc:	31 81       	ldd	r19, Z+1	; 0x01
     6be:	a9 01       	movw	r20, r18
     6c0:	4f 5f       	subi	r20, 0xFF	; 255
     6c2:	5f 4f       	sbci	r21, 0xFF	; 255
     6c4:	51 83       	std	Z+1, r21	; 0x01
     6c6:	40 83       	st	Z, r20
     6c8:	db 01       	movw	r26, r22
     6ca:	a2 0f       	add	r26, r18
     6cc:	b3 1f       	adc	r27, r19
     6ce:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     6d0:	64 81       	ldd	r22, Z+4	; 0x04
     6d2:	75 81       	ldd	r23, Z+5	; 0x05
     6d4:	46 17       	cp	r20, r22
     6d6:	57 07       	cpc	r21, r23
     6d8:	21 f4       	brne	.+8      	; 0x6e2 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     6da:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <txFifo+0x1>
     6de:	10 92 3d 06 	sts	0x063D, r1	; 0x80063d <txFifo>
    txFifo.bytes--;
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	90 93 44 06 	sts	0x0644, r25	; 0x800644 <txFifo+0x7>
     6e8:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     6ec:	9f b7       	in	r25, 0x3f	; 63
     6ee:	f8 94       	cli
      UDRx = byte;
     6f0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     6f4:	e9 ec       	ldi	r30, 0xC9	; 201
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	80 62       	ori	r24, 0x20	; 32
     6fc:	80 83       	st	Z, r24
      udrEmpty = false;
     6fe:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     702:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     704:	2f b7       	in	r18, 0x3f	; 63
     706:	f8 94       	cli
      new = newData;
     708:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <newData>
      newData = false;
     70c:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <newData>
      bytes = rxFifo.bytes;
     710:	40 91 a8 04 	lds	r20, 0x04A8	; 0x8004a8 <rxFifo+0x6>
     714:	50 91 a9 04 	lds	r21, 0x04A9	; 0x8004a9 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     718:	2f bf       	out	0x3f, r18	; 63

    if (new)
     71a:	99 23       	and	r25, r25
     71c:	11 f0       	breq	.+4      	; 0x722 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     71e:	ca 01       	movw	r24, r20
     720:	df cd       	rjmp	.-1090   	; 0x2e0 <HAL_UartBytesReceived>
     722:	08 95       	ret

00000724 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     724:	e6 ef       	ldi	r30, 0xF6	; 246
     726:	f9 e1       	ldi	r31, 0x19	; 25
     728:	14 82       	std	Z+4, r1	; 0x04
     72a:	15 82       	std	Z+5, r1	; 0x05
     72c:	11 82       	std	Z+1, r1	; 0x01
     72e:	10 82       	st	Z, r1
     730:	17 a2       	std	Z+39, r1	; 0x27
     732:	16 a2       	std	Z+38, r1	; 0x26
     734:	ec ef       	ldi	r30, 0xFC	; 252
     736:	f9 e1       	ldi	r31, 0x19	; 25
     738:	8c e1       	ldi	r24, 0x1C	; 28
     73a:	9a e1       	ldi	r25, 0x1A	; 26
     73c:	11 92       	st	Z+, r1
     73e:	11 92       	st	Z+, r1
     740:	e8 17       	cp	r30, r24
     742:	f9 07       	cpc	r31, r25
     744:	d9 f7       	brne	.-10     	; 0x73c <NWK_Init+0x18>
     746:	42 d6       	rcall	.+3204   	; 0x13cc <nwkTxInit>
     748:	60 d3       	rcall	.+1728   	; 0xe0a <nwkRxInit>
     74a:	0d d1       	rcall	.+538    	; 0x966 <nwkFrameInit>
     74c:	40 d0       	rcall	.+128    	; 0x7ce <nwkDataReqInit>
     74e:	92 c1       	rjmp	.+804    	; 0xa74 <nwkRouteInit>
     750:	08 95       	ret

00000752 <NWK_SetAddr>:
     752:	90 93 f7 19 	sts	0x19F7, r25	; 0x8019f7 <nwkIb+0x1>
     756:	80 93 f6 19 	sts	0x19F6, r24	; 0x8019f6 <nwkIb>
     75a:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <PHY_SetShortAddr>
     75e:	08 95       	ret

00000760 <NWK_SetPanId>:
     760:	90 93 f9 19 	sts	0x19F9, r25	; 0x8019f9 <nwkIb+0x3>
     764:	80 93 f8 19 	sts	0x19F8, r24	; 0x8019f8 <nwkIb+0x2>
     768:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <PHY_SetPanId>
     76c:	08 95       	ret

0000076e <NWK_OpenEndpoint>:
     76e:	e8 2f       	mov	r30, r24
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e4 50       	subi	r30, 0x04	; 4
     778:	f6 4e       	sbci	r31, 0xE6	; 230
     77a:	71 83       	std	Z+1, r23	; 0x01
     77c:	60 83       	st	Z, r22
     77e:	08 95       	ret

00000780 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     780:	8b d3       	rcall	.+1814   	; 0xe98 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     782:	20 d7       	rcall	.+3648   	; 0x15c4 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     784:	4d c0       	rjmp	.+154    	; 0x820 <nwkDataReqTaskHandler>
     786:	08 95       	ret

00000788 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     788:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <nwkDataReqQueue>
     78c:	f0 91 48 06 	lds	r31, 0x0648	; 0x800648 <nwkDataReqQueue+0x1>
     790:	30 97       	sbiw	r30, 0x00	; 0
     792:	d9 f0       	breq	.+54     	; 0x7ca <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     794:	22 81       	ldd	r18, Z+2	; 0x02
     796:	33 81       	ldd	r19, Z+3	; 0x03
     798:	82 17       	cp	r24, r18
     79a:	93 07       	cpc	r25, r19
     79c:	89 f4       	brne	.+34     	; 0x7c0 <nwkDataReqTxConf+0x38>
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <nwkDataReqTxConf+0x22>
     7a0:	22 81       	ldd	r18, Z+2	; 0x02
     7a2:	33 81       	ldd	r19, Z+3	; 0x03
     7a4:	28 17       	cp	r18, r24
     7a6:	39 07       	cpc	r19, r25
     7a8:	59 f4       	brne	.+22     	; 0x7c0 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     7aa:	dc 01       	movw	r26, r24
     7ac:	ad 57       	subi	r26, 0x7D	; 125
     7ae:	bf 4f       	sbci	r27, 0xFF	; 255
     7b0:	2c 91       	ld	r18, X
     7b2:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     7b4:	13 96       	adiw	r26, 0x03	; 3
     7b6:	2c 91       	ld	r18, X
     7b8:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7ba:	22 e0       	ldi	r18, 0x02	; 2
     7bc:	24 83       	std	Z+4, r18	; 0x04
      break;
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7c0:	01 90       	ld	r0, Z+
     7c2:	f0 81       	ld	r31, Z
     7c4:	e0 2d       	mov	r30, r0
     7c6:	30 97       	sbiw	r30, 0x00	; 0
     7c8:	59 f7       	brne	.-42     	; 0x7a0 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     7ca:	11 c1       	rjmp	.+546    	; 0x9ee <nwkFrameFree>
     7cc:	08 95       	ret

000007ce <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     7ce:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <nwkDataReqQueue+0x1>
     7d2:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <nwkDataReqQueue>
     7d6:	08 95       	ret

000007d8 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     7d8:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     7da:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     7dc:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     7de:	13 82       	std	Z+3, r1	; 0x03
     7e0:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     7e2:	a6 ef       	ldi	r26, 0xF6	; 246
     7e4:	b9 e1       	ldi	r27, 0x19	; 25
     7e6:	96 96       	adiw	r26, 0x26	; 38
     7e8:	8d 91       	ld	r24, X+
     7ea:	9c 91       	ld	r25, X
     7ec:	97 97       	sbiw	r26, 0x27	; 39
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	97 96       	adiw	r26, 0x27	; 39
     7f2:	9c 93       	st	X, r25
     7f4:	8e 93       	st	-X, r24
     7f6:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     7f8:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <nwkDataReqQueue>
     7fc:	90 91 48 06 	lds	r25, 0x0648	; 0x800648 <nwkDataReqQueue+0x1>
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	39 f4       	brne	.+14     	; 0x812 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     804:	11 82       	std	Z+1, r1	; 0x01
     806:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     808:	f0 93 48 06 	sts	0x0648, r31	; 0x800648 <nwkDataReqQueue+0x1>
     80c:	e0 93 47 06 	sts	0x0647, r30	; 0x800647 <nwkDataReqQueue>
     810:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     816:	f0 93 48 06 	sts	0x0648, r31	; 0x800648 <nwkDataReqQueue+0x1>
     81a:	e0 93 47 06 	sts	0x0647, r30	; 0x800647 <nwkDataReqQueue>
     81e:	08 95       	ret

00000820 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     828:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <nwkDataReqQueue>
     82c:	f0 91 48 06 	lds	r31, 0x0648	; 0x800648 <nwkDataReqQueue+0x1>
     830:	30 97       	sbiw	r30, 0x00	; 0
     832:	09 f4       	brne	.+2      	; 0x836 <nwkDataReqTaskHandler+0x16>
     834:	93 c0       	rjmp	.+294    	; 0x95c <nwkDataReqTaskHandler+0x13c>
     836:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     838:	8c 81       	ldd	r24, Y+4	; 0x04
     83a:	88 23       	and	r24, r24
     83c:	21 f0       	breq	.+8      	; 0x846 <nwkDataReqTaskHandler+0x26>
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	09 f4       	brne	.+2      	; 0x844 <nwkDataReqTaskHandler+0x24>
     842:	66 c0       	rjmp	.+204    	; 0x910 <nwkDataReqTaskHandler+0xf0>
     844:	85 c0       	rjmp	.+266    	; 0x950 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     846:	9a d0       	rcall	.+308    	; 0x97c <nwkFrameAlloc>
     848:	8c 01       	movw	r16, r24
     84a:	00 97       	sbiw	r24, 0x00	; 0
     84c:	21 f4       	brne	.+8      	; 0x856 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     852:	8f 87       	std	Y+15, r24	; 0x0f
     854:	83 c0       	rjmp	.+262    	; 0x95c <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     856:	9b 83       	std	Y+3, r25	; 0x03
     858:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     85e:	f8 01       	movw	r30, r16
     860:	e9 57       	subi	r30, 0x79	; 121
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	84 ec       	ldi	r24, 0xC4	; 196
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	91 83       	std	Z+1, r25	; 0x01
     86a:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	89 85       	ldd	r24, Y+9	; 0x09
     870:	82 fb       	bst	r24, 2
     872:	88 27       	eor	r24, r24
     874:	80 f9       	bld	r24, 0
     876:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     878:	99 85       	ldd	r25, Y+9	; 0x09
     87a:	d8 01       	movw	r26, r16
     87c:	1b 96       	adiw	r26, 0x0b	; 11
     87e:	8c 91       	ld	r24, X
     880:	1b 97       	sbiw	r26, 0x0b	; 11
     882:	90 fb       	bst	r25, 0
     884:	80 f9       	bld	r24, 0
     886:	1b 96       	adiw	r26, 0x0b	; 11
     888:	8c 93       	st	X, r24
     88a:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     88c:	99 85       	ldd	r25, Y+9	; 0x09
     88e:	93 fb       	bst	r25, 3
     890:	99 27       	eor	r25, r25
     892:	90 f9       	bld	r25, 0
     894:	90 fb       	bst	r25, 0
     896:	82 f9       	bld	r24, 2
     898:	1b 96       	adiw	r26, 0x0b	; 11
     89a:	8c 93       	st	X, r24
     89c:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     89e:	e6 ef       	ldi	r30, 0xF6	; 246
     8a0:	f9 e1       	ldi	r31, 0x19	; 25
     8a2:	84 81       	ldd	r24, Z+4	; 0x04
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	84 83       	std	Z+4, r24	; 0x04
     8a8:	1c 96       	adiw	r26, 0x0c	; 12
     8aa:	8c 93       	st	X, r24
     8ac:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	1e 96       	adiw	r26, 0x0e	; 14
     8b4:	9c 93       	st	X, r25
     8b6:	8e 93       	st	-X, r24
     8b8:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     8ba:	8d 81       	ldd	r24, Y+5	; 0x05
     8bc:	9e 81       	ldd	r25, Y+6	; 0x06
     8be:	50 96       	adiw	r26, 0x10	; 16
     8c0:	9c 93       	st	X, r25
     8c2:	8e 93       	st	-X, r24
     8c4:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     8c6:	88 85       	ldd	r24, Y+8	; 0x08
     8c8:	98 2f       	mov	r25, r24
     8ca:	9f 70       	andi	r25, 0x0F	; 15
     8cc:	51 96       	adiw	r26, 0x11	; 17
     8ce:	8c 91       	ld	r24, X
     8d0:	51 97       	sbiw	r26, 0x11	; 17
     8d2:	80 7f       	andi	r24, 0xF0	; 240
     8d4:	89 2b       	or	r24, r25
     8d6:	51 96       	adiw	r26, 0x11	; 17
     8d8:	8c 93       	st	X, r24
     8da:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     8dc:	9f 81       	ldd	r25, Y+7	; 0x07
     8de:	92 95       	swap	r25
     8e0:	90 7f       	andi	r25, 0xF0	; 240
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	89 2b       	or	r24, r25
     8e6:	51 96       	adiw	r26, 0x11	; 17
     8e8:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     8ea:	f8 01       	movw	r30, r16
     8ec:	ef 57       	subi	r30, 0x7F	; 127
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	4c 85       	ldd	r20, Y+12	; 0x0c
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	6a 85       	ldd	r22, Y+10	; 0x0a
     8f6:	7b 85       	ldd	r23, Y+11	; 0x0b
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <memcpy>
  frame->size += req->size;
     900:	f8 01       	movw	r30, r16
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	8c 85       	ldd	r24, Y+12	; 0x0c
     906:	89 0f       	add	r24, r25
     908:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     90a:	c8 01       	movw	r24, r16
     90c:	82 d5       	rcall	.+2820   	; 0x1412 <nwkTxFrame>
     90e:	26 c0       	rjmp	.+76     	; 0x95c <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     910:	ec 17       	cp	r30, r28
     912:	fd 07       	cpc	r31, r29
     914:	41 f4       	brne	.+16     	; 0x926 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <nwkDataReqQueue+0x1>
     91e:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <nwkDataReqQueue>
     922:	0a c0       	rjmp	.+20     	; 0x938 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     924:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	8c 17       	cp	r24, r28
     92c:	9d 07       	cpc	r25, r29
     92e:	d1 f7       	brne	.-12     	; 0x924 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     930:	88 81       	ld	r24, Y
     932:	99 81       	ldd	r25, Y+1	; 0x01
     934:	91 83       	std	Z+1, r25	; 0x01
     936:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     938:	e6 ef       	ldi	r30, 0xF6	; 246
     93a:	f9 e1       	ldi	r31, 0x19	; 25
     93c:	86 a1       	ldd	r24, Z+38	; 0x26
     93e:	97 a1       	ldd	r25, Z+39	; 0x27
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	97 a3       	std	Z+39, r25	; 0x27
     944:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     946:	ed 85       	ldd	r30, Y+13	; 0x0d
     948:	fe 85       	ldd	r31, Y+14	; 0x0e
     94a:	ce 01       	movw	r24, r28
     94c:	19 95       	eicall
     94e:	06 c0       	rjmp	.+12     	; 0x95c <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     950:	09 90       	ld	r0, Y+
     952:	d8 81       	ld	r29, Y
     954:	c0 2d       	mov	r28, r0
     956:	20 97       	sbiw	r28, 0x00	; 0
     958:	09 f0       	breq	.+2      	; 0x95c <nwkDataReqTaskHandler+0x13c>
     95a:	6e cf       	rjmp	.-292    	; 0x838 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     966:	e9 e4       	ldi	r30, 0x49	; 73
     968:	f6 e0       	ldi	r31, 0x06	; 6
     96a:	87 e5       	ldi	r24, 0x57	; 87
     96c:	96 e1       	ldi	r25, 0x16	; 22
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     96e:	10 82       	st	Z, r1
     970:	e7 57       	subi	r30, 0x77	; 119
     972:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     974:	e8 17       	cp	r30, r24
     976:	f9 07       	cpc	r31, r25
     978:	d1 f7       	brne	.-12     	; 0x96e <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     97a:	08 95       	ret

0000097c <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     97c:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <nwkFrameFrames>
     980:	88 23       	and	r24, r24
     982:	59 f0       	breq	.+22     	; 0x99a <nwkFrameAlloc+0x1e>
     984:	e2 ed       	ldi	r30, 0xD2	; 210
     986:	f6 e0       	ldi	r31, 0x06	; 6
     988:	67 e5       	ldi	r22, 0x57	; 87
     98a:	76 e1       	ldi	r23, 0x16	; 22
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	ac 01       	movw	r20, r24
     992:	20 81       	ld	r18, Z
     994:	21 11       	cpse	r18, r1
     996:	22 c0       	rjmp	.+68     	; 0x9dc <nwkFrameAlloc+0x60>
     998:	02 c0       	rjmp	.+4      	; 0x99e <nwkFrameAlloc+0x22>
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     99e:	69 e8       	ldi	r22, 0x89	; 137
     9a0:	64 9f       	mul	r22, r20
     9a2:	90 01       	movw	r18, r0
     9a4:	65 9f       	mul	r22, r21
     9a6:	30 0d       	add	r19, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	c9 01       	movw	r24, r18
     9ac:	87 5b       	subi	r24, 0xB7	; 183
     9ae:	99 4f       	sbci	r25, 0xF9	; 249
     9b0:	fc 01       	movw	r30, r24
     9b2:	11 92       	st	Z+, r1
     9b4:	6a 95       	dec	r22
     9b6:	e9 f7       	brne	.-6      	; 0x9b2 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     9b8:	40 e1       	ldi	r20, 0x10	; 16
     9ba:	fc 01       	movw	r30, r24
     9bc:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     9be:	ef 57       	subi	r30, 0x7F	; 127
     9c0:	ff 4f       	sbci	r31, 0xFF	; 255
     9c2:	25 5a       	subi	r18, 0xA5	; 165
     9c4:	39 4f       	sbci	r19, 0xF9	; 249
     9c6:	31 83       	std	Z+1, r19	; 0x01
     9c8:	20 83       	st	Z, r18
      nwkIb.lock++;
     9ca:	e6 ef       	ldi	r30, 0xF6	; 246
     9cc:	f9 e1       	ldi	r31, 0x19	; 25
     9ce:	26 a1       	ldd	r18, Z+38	; 0x26
     9d0:	37 a1       	ldd	r19, Z+39	; 0x27
     9d2:	2f 5f       	subi	r18, 0xFF	; 255
     9d4:	3f 4f       	sbci	r19, 0xFF	; 255
     9d6:	37 a3       	std	Z+39, r19	; 0x27
     9d8:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     9da:	08 95       	ret
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	e7 57       	subi	r30, 0x77	; 119
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     9e2:	e6 17       	cp	r30, r22
     9e4:	f7 07       	cpc	r31, r23
     9e6:	a1 f6       	brne	.-88     	; 0x990 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
}
     9ec:	08 95       	ret

000009ee <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     9ee:	fc 01       	movw	r30, r24
     9f0:	10 82       	st	Z, r1
  nwkIb.lock--;
     9f2:	e6 ef       	ldi	r30, 0xF6	; 246
     9f4:	f9 e1       	ldi	r31, 0x19	; 25
     9f6:	86 a1       	ldd	r24, Z+38	; 0x26
     9f8:	97 a1       	ldd	r25, Z+39	; 0x27
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	97 a3       	std	Z+39, r25	; 0x27
     9fe:	86 a3       	std	Z+38, r24	; 0x26
     a00:	08 95       	ret

00000a02 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	41 f0       	breq	.+16     	; 0xa16 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     a06:	fc 01       	movw	r30, r24
     a08:	e7 57       	subi	r30, 0x77	; 119
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a0c:	86 e1       	ldi	r24, 0x16	; 22
     a0e:	e7 35       	cpi	r30, 0x57	; 87
     a10:	f8 07       	cpc	r31, r24
     a12:	18 f0       	brcs	.+6      	; 0xa1a <nwkFrameNext+0x18>
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     a16:	e9 e4       	ldi	r30, 0x49	; 73
     a18:	f6 e0       	ldi	r31, 0x06	; 6
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a1a:	80 81       	ld	r24, Z
     a1c:	88 23       	and	r24, r24
     a1e:	21 f0       	breq	.+8      	; 0xa28 <nwkFrameNext+0x26>
     a20:	0f c0       	rjmp	.+30     	; 0xa40 <nwkFrameNext+0x3e>
     a22:	80 81       	ld	r24, Z
     a24:	81 11       	cpse	r24, r1
     a26:	0f c0       	rjmp	.+30     	; 0xa46 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a28:	e7 57       	subi	r30, 0x77	; 119
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	86 e1       	ldi	r24, 0x16	; 22
     a2e:	e7 35       	cpi	r30, 0x57	; 87
     a30:	f8 07       	cpc	r31, r24
     a32:	b8 f3       	brcs	.-18     	; 0xa22 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	08 95       	ret
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a40:	8e 2f       	mov	r24, r30
     a42:	9f 2f       	mov	r25, r31
     a44:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a46:	8e 2f       	mov	r24, r30
     a48:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     a4a:	08 95       	ret

00000a4c <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     a4c:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     a4e:	dc 01       	movw	r26, r24
     a50:	ad 57       	subi	r26, 0x7D	; 125
     a52:	bf 4f       	sbci	r27, 0xFF	; 255
     a54:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a56:	a6 ef       	ldi	r26, 0xF6	; 246
     a58:	b9 e1       	ldi	r27, 0x19	; 25
     a5a:	14 96       	adiw	r26, 0x04	; 4
     a5c:	9c 91       	ld	r25, X
     a5e:	14 97       	sbiw	r26, 0x04	; 4
     a60:	9f 5f       	subi	r25, 0xFF	; 255
     a62:	14 96       	adiw	r26, 0x04	; 4
     a64:	9c 93       	st	X, r25
     a66:	14 97       	sbiw	r26, 0x04	; 4
     a68:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     a6a:	8d 91       	ld	r24, X+
     a6c:	9c 91       	ld	r25, X
     a6e:	96 87       	std	Z+14, r25	; 0x0e
     a70:	85 87       	std	Z+13, r24	; 0x0d
     a72:	08 95       	ret

00000a74 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     a74:	a8 e5       	ldi	r26, 0x58	; 88
     a76:	b6 e1       	ldi	r27, 0x16	; 22
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	4f ef       	ldi	r20, 0xFF	; 255
     a7e:	5f ef       	ldi	r21, 0xFF	; 255
     a80:	11 96       	adiw	r26, 0x01	; 1
     a82:	5c 93       	st	X, r21
     a84:	4e 93       	st	-X, r20
     a86:	fc 01       	movw	r30, r24
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	e8 1b       	sub	r30, r24
     a96:	f9 0b       	sbc	r31, r25
     a98:	e9 5a       	subi	r30, 0xA9	; 169
     a9a:	f9 4e       	sbci	r31, 0xE9	; 233
     a9c:	20 81       	ld	r18, Z
     a9e:	2e 7f       	andi	r18, 0xFE	; 254
     aa0:	20 83       	st	Z, r18
     aa2:	14 96       	adiw	r26, 0x04	; 4
     aa4:	1c 92       	st	X, r1
     aa6:	14 97       	sbiw	r26, 0x04	; 4
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	17 96       	adiw	r26, 0x07	; 7
     aac:	84 36       	cpi	r24, 0x64	; 100
     aae:	91 05       	cpc	r25, r1
     ab0:	39 f7       	brne	.-50     	; 0xa80 <nwkRouteInit+0xc>
     ab2:	08 95       	ret

00000ab4 <NWK_RouteFindEntry>:
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	e8 e5       	ldi	r30, 0x58	; 88
     abe:	f6 e1       	ldi	r31, 0x16	; 22
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	06 2f       	mov	r16, r22
     ac6:	10 e0       	ldi	r17, 0x00	; 0
     ac8:	40 81       	ld	r20, Z
     aca:	51 81       	ldd	r21, Z+1	; 0x01
     acc:	48 17       	cp	r20, r24
     ace:	59 07       	cpc	r21, r25
     ad0:	b1 f4       	brne	.+44     	; 0xafe <NWK_RouteFindEntry+0x4a>
     ad2:	d9 01       	movw	r26, r18
     ad4:	aa 0f       	add	r26, r26
     ad6:	bb 1f       	adc	r27, r27
     ad8:	aa 0f       	add	r26, r26
     ada:	bb 1f       	adc	r27, r27
     adc:	aa 0f       	add	r26, r26
     ade:	bb 1f       	adc	r27, r27
     ae0:	a2 1b       	sub	r26, r18
     ae2:	b3 0b       	sbc	r27, r19
     ae4:	a9 5a       	subi	r26, 0xA9	; 169
     ae6:	b9 4e       	sbci	r27, 0xE9	; 233
     ae8:	4c 91       	ld	r20, X
     aea:	46 95       	lsr	r20
     aec:	41 70       	andi	r20, 0x01	; 1
     aee:	c4 2f       	mov	r28, r20
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	d4 2f       	mov	r29, r20
     af4:	c0 17       	cp	r28, r16
     af6:	d1 07       	cpc	r29, r17
     af8:	11 f4       	brne	.+4      	; 0xafe <NWK_RouteFindEntry+0x4a>
     afa:	cd 01       	movw	r24, r26
     afc:	08 c0       	rjmp	.+16     	; 0xb0e <NWK_RouteFindEntry+0x5a>
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	37 96       	adiw	r30, 0x07	; 7
     b04:	24 36       	cpi	r18, 0x64	; 100
     b06:	31 05       	cpc	r19, r1
     b08:	f9 f6       	brne	.-66     	; 0xac8 <NWK_RouteFindEntry+0x14>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <NWK_RouteNewEntry>:
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	e7 e5       	ldi	r30, 0x57	; 87
     b1e:	f6 e1       	ldi	r31, 0x16	; 22
     b20:	80 81       	ld	r24, Z
     b22:	80 fd       	sbrc	r24, 0
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <NWK_RouteNewEntry+0x28>
     b26:	85 81       	ldd	r24, Z+5	; 0x05
     b28:	88 23       	and	r24, r24
     b2a:	81 f0       	breq	.+32     	; 0xb4c <NWK_RouteNewEntry+0x34>
     b2c:	10 97       	sbiw	r26, 0x00	; 0
     b2e:	39 f0       	breq	.+14     	; 0xb3e <NWK_RouteNewEntry+0x26>
     b30:	15 96       	adiw	r26, 0x05	; 5
     b32:	9c 91       	ld	r25, X
     b34:	15 97       	sbiw	r26, 0x05	; 5
     b36:	89 17       	cp	r24, r25
     b38:	18 f4       	brcc	.+6      	; 0xb40 <NWK_RouteNewEntry+0x28>
     b3a:	df 01       	movw	r26, r30
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <NWK_RouteNewEntry+0x28>
     b3e:	df 01       	movw	r26, r30
     b40:	37 96       	adiw	r30, 0x07	; 7
     b42:	89 e1       	ldi	r24, 0x19	; 25
     b44:	e3 31       	cpi	r30, 0x13	; 19
     b46:	f8 07       	cpc	r31, r24
     b48:	59 f7       	brne	.-42     	; 0xb20 <NWK_RouteNewEntry+0x8>
     b4a:	fd 01       	movw	r30, r26
     b4c:	80 81       	ld	r24, Z
     b4e:	8d 70       	andi	r24, 0x0D	; 13
     b50:	80 63       	ori	r24, 0x30	; 48
     b52:	80 83       	st	Z, r24
     b54:	80 e8       	ldi	r24, 0x80	; 128
     b56:	85 83       	std	Z+5, r24	; 0x05
     b58:	cf 01       	movw	r24, r30
     b5a:	08 95       	ret

00000b5c <NWK_RouteFreeEntry>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	80 fd       	sbrc	r24, 0
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <NWK_RouteFreeEntry+0x12>
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	9f ef       	ldi	r25, 0xFF	; 255
     b68:	92 83       	std	Z+2, r25	; 0x02
     b6a:	81 83       	std	Z+1, r24	; 0x01
     b6c:	15 82       	std	Z+5, r1	; 0x05
     b6e:	08 95       	ret

00000b70 <NWK_RouteNextHop>:
     b70:	a1 df       	rcall	.-190    	; 0xab4 <NWK_RouteFindEntry>
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	21 f0       	breq	.+8      	; 0xb7e <NWK_RouteNextHop+0xe>
     b76:	fc 01       	movw	r30, r24
     b78:	83 81       	ldd	r24, Z+3	; 0x03
     b7a:	94 81       	ldd	r25, Z+4	; 0x04
     b7c:	08 95       	ret
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	08 95       	ret

00000b84 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     b84:	97 df       	rcall	.-210    	; 0xab4 <NWK_RouteFindEntry>
  if (entry)
     b86:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     b88:	09 f0       	breq	.+2      	; 0xb8c <nwkRouteRemove+0x8>
     b8a:	e8 cf       	rjmp	.-48     	; 0xb5c <NWK_RouteFreeEntry>
     b8c:	08 95       	ret

00000b8e <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     b98:	01 85       	ldd	r16, Z+9	; 0x09
     b9a:	12 85       	ldd	r17, Z+10	; 0x0a
     b9c:	11 23       	and	r17, r17
     b9e:	2c f4       	brge	.+10     	; 0xbaa <nwkRouteFrameReceived+0x1c>
     ba0:	85 85       	ldd	r24, Z+13	; 0x0d
     ba2:	96 85       	ldd	r25, Z+14	; 0x0e
     ba4:	08 17       	cp	r16, r24
     ba6:	19 07       	cpc	r17, r25
     ba8:	e1 f5       	brne	.+120    	; 0xc22 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     baa:	85 81       	ldd	r24, Z+5	; 0x05
     bac:	96 81       	ldd	r25, Z+6	; 0x06
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	c1 f1       	breq	.+112    	; 0xc22 <nwkRouteFrameReceived+0x94>
     bb2:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	85 85       	ldd	r24, Z+13	; 0x0d
     bb8:	96 85       	ldd	r25, Z+14	; 0x0e
     bba:	7c df       	rcall	.-264    	; 0xab4 <NWK_RouteFindEntry>
     bbc:	fc 01       	movw	r30, r24

  if (entry)
     bbe:	89 2b       	or	r24, r25
     bc0:	a1 f0       	breq	.+40     	; 0xbea <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     bc2:	8f 81       	ldd	r24, Y+7	; 0x07
     bc4:	98 85       	ldd	r25, Y+8	; 0x08
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	f9 f4       	brne	.+62     	; 0xc08 <nwkRouteFrameReceived+0x7a>
     bca:	20 91 f6 19 	lds	r18, 0x19F6	; 0x8019f6 <nwkIb>
     bce:	30 91 f7 19 	lds	r19, 0x19F7	; 0x8019f7 <nwkIb+0x1>
     bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     bd4:	98 89       	ldd	r25, Y+16	; 0x10
     bd6:	28 17       	cp	r18, r24
     bd8:	39 07       	cpc	r19, r25
     bda:	b1 f4       	brne	.+44     	; 0xc08 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     bdc:	14 83       	std	Z+4, r17	; 0x04
     bde:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     be0:	80 81       	ld	r24, Z
     be2:	8f 70       	andi	r24, 0x0F	; 15
     be4:	80 63       	ori	r24, 0x30	; 48
     be6:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     be8:	0a c0       	rjmp	.+20     	; 0xbfe <nwkRouteFrameReceived+0x70>
     bea:	96 df       	rcall	.-212    	; 0xb18 <NWK_RouteNewEntry>
     bec:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     bee:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf2:	92 83       	std	Z+2, r25	; 0x02
     bf4:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     bf6:	89 85       	ldd	r24, Y+9	; 0x09
     bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfa:	94 83       	std	Z+4, r25	; 0x04
     bfc:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     bfe:	cd 57       	subi	r28, 0x7D	; 125
     c00:	df 4f       	sbci	r29, 0xFF	; 255
     c02:	88 81       	ld	r24, Y
     c04:	86 83       	std	Z+6, r24	; 0x06
     c06:	0d c0       	rjmp	.+26     	; 0xc22 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     c08:	83 81       	ldd	r24, Z+3	; 0x03
     c0a:	94 81       	ldd	r25, Z+4	; 0x04
     c0c:	08 17       	cp	r16, r24
     c0e:	19 07       	cpc	r17, r25
     c10:	b1 f3       	breq	.-20     	; 0xbfe <nwkRouteFrameReceived+0x70>
     c12:	96 81       	ldd	r25, Z+6	; 0x06
     c14:	de 01       	movw	r26, r28
     c16:	ad 57       	subi	r26, 0x7D	; 125
     c18:	bf 4f       	sbci	r27, 0xFF	; 255
     c1a:	8c 91       	ld	r24, X
     c1c:	98 17       	cp	r25, r24
     c1e:	f0 f2       	brcs	.-68     	; 0xbdc <nwkRouteFrameReceived+0x4e>
     c20:	ee cf       	rjmp	.-36     	; 0xbfe <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     c32:	87 85       	ldd	r24, Z+15	; 0x0f
     c34:	90 89       	ldd	r25, Z+16	; 0x10
     c36:	8f 3f       	cpi	r24, 0xFF	; 255
     c38:	2f ef       	ldi	r18, 0xFF	; 255
     c3a:	92 07       	cpc	r25, r18
     c3c:	d9 f1       	breq	.+118    	; 0xcb4 <nwkRouteFrameSent+0x88>
     c3e:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     c40:	63 85       	ldd	r22, Z+11	; 0x0b
     c42:	63 fb       	bst	r22, 3
     c44:	66 27       	eor	r22, r22
     c46:	60 f9       	bld	r22, 0
     c48:	35 df       	rcall	.-406    	; 0xab4 <NWK_RouteFindEntry>
     c4a:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     c4c:	89 2b       	or	r24, r25
     c4e:	91 f1       	breq	.+100    	; 0xcb4 <nwkRouteFrameSent+0x88>
     c50:	8c 91       	ld	r24, X
     c52:	80 fd       	sbrc	r24, 0
     c54:	2f c0       	rjmp	.+94     	; 0xcb4 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     c56:	fe 01       	movw	r30, r28
     c58:	ed 57       	subi	r30, 0x7D	; 125
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 81       	ld	r24, Z
     c5e:	81 11       	cpse	r24, r1
     c60:	19 c0       	rjmp	.+50     	; 0xc94 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     c62:	8c 91       	ld	r24, X
     c64:	8f 70       	andi	r24, 0x0F	; 15
     c66:	80 63       	ori	r24, 0x30	; 48
     c68:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     c6a:	15 96       	adiw	r26, 0x05	; 5
     c6c:	8c 91       	ld	r24, X
     c6e:	15 97       	sbiw	r26, 0x05	; 5
     c70:	8f 5f       	subi	r24, 0xFF	; 255
     c72:	15 96       	adiw	r26, 0x05	; 5
     c74:	8c 93       	st	X, r24
     c76:	8f 3f       	cpi	r24, 0xFF	; 255
     c78:	e9 f4       	brne	.+58     	; 0xcb4 <nwkRouteFrameSent+0x88>
     c7a:	ec e5       	ldi	r30, 0x5C	; 92
     c7c:	f6 e1       	ldi	r31, 0x16	; 22
     c7e:	28 e1       	ldi	r18, 0x18	; 24
     c80:	39 e1       	ldi	r19, 0x19	; 25
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     c82:	80 81       	ld	r24, Z
     c84:	86 95       	lsr	r24
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 83       	st	Z, r24
     c8a:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     c8c:	e2 17       	cp	r30, r18
     c8e:	f3 07       	cpc	r31, r19
     c90:	c1 f7       	brne	.-16     	; 0xc82 <nwkRouteFrameSent+0x56>
     c92:	10 c0       	rjmp	.+32     	; 0xcb4 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     c94:	9c 91       	ld	r25, X
     c96:	89 2f       	mov	r24, r25
     c98:	82 95       	swap	r24
     c9a:	8f 70       	andi	r24, 0x0F	; 15
     c9c:	81 5f       	subi	r24, 0xF1	; 241
     c9e:	8f 70       	andi	r24, 0x0F	; 15
     ca0:	28 2f       	mov	r18, r24
     ca2:	22 95       	swap	r18
     ca4:	20 7f       	andi	r18, 0xF0	; 240
     ca6:	9f 70       	andi	r25, 0x0F	; 15
     ca8:	92 2b       	or	r25, r18
     caa:	9c 93       	st	X, r25
     cac:	81 11       	cpse	r24, r1
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     cb0:	cd 01       	movw	r24, r26
     cb2:	54 df       	rcall	.-344    	; 0xb5c <NWK_RouteFreeEntry>
  }
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     cc0:	87 85       	ldd	r24, Z+15	; 0x0f
     cc2:	90 89       	ldd	r25, Z+16	; 0x10
     cc4:	8f 3f       	cpi	r24, 0xFF	; 255
     cc6:	2f ef       	ldi	r18, 0xFF	; 255
     cc8:	92 07       	cpc	r25, r18
     cca:	29 f4       	brne	.+10     	; 0xcd6 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	9f ef       	ldi	r25, 0xFF	; 255
     cd0:	90 87       	std	Z+8, r25	; 0x08
     cd2:	87 83       	std	Z+7, r24	; 0x07
     cd4:	0e c0       	rjmp	.+28     	; 0xcf2 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     cd6:	23 85       	ldd	r18, Z+11	; 0x0b
     cd8:	22 ff       	sbrs	r18, 2
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     cdc:	90 87       	std	Z+8, r25	; 0x08
     cde:	87 83       	std	Z+7, r24	; 0x07
     ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <nwkRoutePrepareTx+0x38>
     ce2:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     ce4:	63 85       	ldd	r22, Z+11	; 0x0b
     ce6:	63 fb       	bst	r22, 3
     ce8:	66 27       	eor	r22, r22
     cea:	60 f9       	bld	r22, 0
     cec:	41 df       	rcall	.-382    	; 0xb70 <NWK_RouteNextHop>
     cee:	98 87       	std	Y+8, r25	; 0x08
     cf0:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     d0c:	1b 85       	ldd	r17, Y+11	; 0x0b
     d0e:	13 fb       	bst	r17, 3
     d10:	11 27       	eor	r17, r17
     d12:	10 f9       	bld	r17, 0
     d14:	cf 84       	ldd	r12, Y+15	; 0x0f
     d16:	d8 88       	ldd	r13, Y+16	; 0x10
     d18:	61 2f       	mov	r22, r17
     d1a:	c6 01       	movw	r24, r12
     d1c:	29 df       	rcall	.-430    	; 0xb70 <NWK_RouteNextHop>
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	59 f0       	breq	.+22     	; 0xd38 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     d22:	fe 01       	movw	r30, r28
     d24:	e9 57       	subi	r30, 0x79	; 121
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	11 82       	std	Z+1, r1	; 0x01
     d2a:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     d32:	ce 01       	movw	r24, r28
     d34:	6e d3       	rcall	.+1756   	; 0x1412 <nwkTxFrame>
     d36:	22 c0       	rjmp	.+68     	; 0xd7c <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     d38:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     d3a:	be 84       	ldd	r11, Y+14	; 0x0e
     d3c:	1f de       	rcall	.-962    	; 0x97c <nwkFrameAlloc>
     d3e:	7c 01       	movw	r14, r24
     d40:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     d42:	d1 f0       	breq	.+52     	; 0xd78 <nwkRouteFrame+0x80>
     d44:	83 de       	rcall	.-762    	; 0xa4c <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     d46:	f7 01       	movw	r30, r14
     d48:	81 81       	ldd	r24, Z+1	; 0x01
     d4a:	8a 5f       	subi	r24, 0xFA	; 250
     d4c:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     d4e:	e9 57       	subi	r30, 0x79	; 121
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	11 82       	std	Z+1, r1	; 0x01
     d54:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     d56:	f7 01       	movw	r30, r14
     d58:	b0 8a       	std	Z+16, r11	; 0x10
     d5a:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     d5c:	ef 57       	subi	r30, 0x7F	; 127
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	01 90       	ld	r0, Z+
     d62:	f0 81       	ld	r31, Z
     d64:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	80 83       	st	Z, r24
  command->srcAddr = src;
     d6a:	b2 82       	std	Z+2, r11	; 0x02
     d6c:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     d6e:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     d70:	c3 82       	std	Z+3, r12	; 0x03
     d72:	15 83       	std	Z+5, r17	; 0x05
     d74:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     d76:	4d d3       	rcall	.+1690   	; 0x1412 <nwkTxFrame>
     d78:	ce 01       	movw	r24, r28
     d7a:	39 de       	rcall	.-910    	; 0x9ee <nwkFrameFree>
  }
}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	08 95       	ret

00000d90 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     d90:	fc 01       	movw	r30, r24
     d92:	21 85       	ldd	r18, Z+9	; 0x09
     d94:	26 30       	cpi	r18, 0x06	; 6
     d96:	49 f4       	brne	.+18     	; 0xdaa <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     d98:	07 80       	ldd	r0, Z+7	; 0x07
     d9a:	f0 85       	ldd	r31, Z+8	; 0x08
     d9c:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     d9e:	65 81       	ldd	r22, Z+5	; 0x05
     da0:	83 81       	ldd	r24, Z+3	; 0x03
     da2:	94 81       	ldd	r25, Z+4	; 0x04
     da4:	ef de       	rcall	.-546    	; 0xb84 <nwkRouteRemove>

  return true;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     daa:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     dac:	08 95       	ret

00000dae <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     dae:	dc 01       	movw	r26, r24
     db0:	19 96       	adiw	r26, 0x09	; 9
     db2:	2c 91       	ld	r18, X
     db4:	19 97       	sbiw	r26, 0x09	; 9
     db6:	22 23       	and	r18, r18
     db8:	71 f0       	breq	.+28     	; 0xdd6 <nwkRxServiceDataInd+0x28>
     dba:	17 96       	adiw	r26, 0x07	; 7
     dbc:	ed 91       	ld	r30, X+
     dbe:	fc 91       	ld	r31, X
     dc0:	18 97       	sbiw	r26, 0x08	; 8
     dc2:	20 81       	ld	r18, Z
     dc4:	22 23       	and	r18, r18
     dc6:	19 f0       	breq	.+6      	; 0xdce <nwkRxServiceDataInd+0x20>
     dc8:	21 30       	cpi	r18, 0x01	; 1
     dca:	19 f0       	breq	.+6      	; 0xdd2 <nwkRxServiceDataInd+0x24>
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <nwkRxServiceDataInd+0x2c>
     dce:	b2 c3       	rjmp	.+1892   	; 0x1534 <nwkTxAckReceived>
     dd0:	08 95       	ret
     dd2:	de cf       	rjmp	.-68     	; 0xd90 <nwkRouteErrorReceived>
     dd4:	08 95       	ret
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	08 95       	ret
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	08 95       	ret

00000dde <nwkRxDuplicateRejectionTimerHandler>:
     dde:	bc 01       	movw	r22, r24
     de0:	e5 e2       	ldi	r30, 0x25	; 37
     de2:	f9 e1       	ldi	r31, 0x19	; 25
     de4:	27 e5       	ldi	r18, 0x57	; 87
     de6:	39 e1       	ldi	r19, 0x19	; 25
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	51 e0       	ldi	r21, 0x01	; 1
     dec:	90 81       	ld	r25, Z
     dee:	99 23       	and	r25, r25
     df0:	19 f0       	breq	.+6      	; 0xdf8 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     df2:	91 50       	subi	r25, 0x01	; 1
     df4:	90 83       	st	Z, r25
     df6:	45 2f       	mov	r20, r21
     df8:	35 96       	adiw	r30, 0x05	; 5
     dfa:	e2 17       	cp	r30, r18
     dfc:	f3 07       	cpc	r31, r19
     dfe:	b1 f7       	brne	.-20     	; 0xdec <nwkRxDuplicateRejectionTimerHandler+0xe>
     e00:	44 23       	and	r20, r20
     e02:	11 f0       	breq	.+4      	; 0xe08 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     e04:	cb 01       	movw	r24, r22
     e06:	6d c6       	rjmp	.+3290   	; 0x1ae2 <SYS_TimerStart>
     e08:	08 95       	ret

00000e0a <nwkRxInit>:
     e0a:	e5 e2       	ldi	r30, 0x25	; 37
     e0c:	f9 e1       	ldi	r31, 0x19	; 25
     e0e:	87 e5       	ldi	r24, 0x57	; 87
     e10:	99 e1       	ldi	r25, 0x19	; 25
     e12:	10 82       	st	Z, r1
     e14:	35 96       	adiw	r30, 0x05	; 5
     e16:	e8 17       	cp	r30, r24
     e18:	f9 07       	cpc	r31, r25
     e1a:	d9 f7       	brne	.-10     	; 0xe12 <nwkRxInit+0x8>
     e1c:	e3 e1       	ldi	r30, 0x13	; 19
     e1e:	f9 e1       	ldi	r31, 0x19	; 25
     e20:	84 e6       	ldi	r24, 0x64	; 100
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	86 83       	std	Z+6, r24	; 0x06
     e2a:	97 83       	std	Z+7, r25	; 0x07
     e2c:	a0 87       	std	Z+8, r26	; 0x08
     e2e:	b1 87       	std	Z+9, r27	; 0x09
     e30:	12 86       	std	Z+10, r1	; 0x0a
     e32:	8f ee       	ldi	r24, 0xEF	; 239
     e34:	96 e0       	ldi	r25, 0x06	; 6
     e36:	94 87       	std	Z+12, r25	; 0x0c
     e38:	83 87       	std	Z+11, r24	; 0x0b
     e3a:	67 ed       	ldi	r22, 0xD7	; 215
     e3c:	76 e0       	ldi	r23, 0x06	; 6
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	96 cc       	rjmp	.-1748   	; 0x76e <NWK_OpenEndpoint>
     e42:	08 95       	ret

00000e44 <PHY_DataInd>:
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	dc 01       	movw	r26, r24
     e4a:	ed 91       	ld	r30, X+
     e4c:	fc 91       	ld	r31, X
     e4e:	11 97       	sbiw	r26, 0x01	; 1
     e50:	21 81       	ldd	r18, Z+1	; 0x01
     e52:	28 38       	cpi	r18, 0x88	; 136
     e54:	f1 f4       	brne	.+60     	; 0xe92 <PHY_DataInd+0x4e>
     e56:	20 81       	ld	r18, Z
     e58:	2f 7d       	andi	r18, 0xDF	; 223
     e5a:	21 34       	cpi	r18, 0x41	; 65
     e5c:	d1 f4       	brne	.+52     	; 0xe92 <PHY_DataInd+0x4e>
     e5e:	12 96       	adiw	r26, 0x02	; 2
     e60:	2c 91       	ld	r18, X
     e62:	20 31       	cpi	r18, 0x10	; 16
     e64:	b0 f0       	brcs	.+44     	; 0xe92 <PHY_DataInd+0x4e>
     e66:	ec 01       	movw	r28, r24
     e68:	89 dd       	rcall	.-1262   	; 0x97c <nwkFrameAlloc>
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	91 f0       	breq	.+36     	; 0xe92 <PHY_DataInd+0x4e>
     e6e:	20 e2       	ldi	r18, 0x20	; 32
     e70:	fc 01       	movw	r30, r24
     e72:	20 83       	st	Z, r18
     e74:	2a 81       	ldd	r18, Y+2	; 0x02
     e76:	21 83       	std	Z+1, r18	; 0x01
     e78:	2b 81       	ldd	r18, Y+3	; 0x03
     e7a:	ed 57       	subi	r30, 0x7D	; 125
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	20 83       	st	Z, r18
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	31 96       	adiw	r30, 0x01	; 1
     e84:	20 83       	st	Z, r18
     e86:	4a 81       	ldd	r20, Y+2	; 0x02
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	68 81       	ld	r22, Y
     e8c:	79 81       	ldd	r23, Y+1	; 0x01
     e8e:	02 96       	adiw	r24, 0x02	; 2
     e90:	15 d7       	rcall	.+3626   	; 0x1cbc <memcpy>
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     e98:	2f 92       	push	r2
     e9a:	3f 92       	push	r3
     e9c:	4f 92       	push	r4
     e9e:	5f 92       	push	r5
     ea0:	6f 92       	push	r6
     ea2:	7f 92       	push	r7
     ea4:	8f 92       	push	r8
     ea6:	9f 92       	push	r9
     ea8:	af 92       	push	r10
     eaa:	bf 92       	push	r11
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	2c 97       	sbiw	r28, 0x0c	; 12
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     ed0:	0f 2e       	mov	r0, r31
     ed2:	f4 e2       	ldi	r31, 0x24	; 36
     ed4:	bf 2e       	mov	r11, r31
     ed6:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     ed8:	0f 2e       	mov	r0, r31
     eda:	f6 ef       	ldi	r31, 0xF6	; 246
     edc:	ef 2e       	mov	r14, r31
     ede:	f9 e1       	ldi	r31, 0x19	; 25
     ee0:	ff 2e       	mov	r15, r31
     ee2:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     ee4:	55 24       	eor	r5, r5
     ee6:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     ee8:	68 94       	set
     eea:	aa 24       	eor	r10, r10
     eec:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     eee:	68 94       	set
     ef0:	77 24       	eor	r7, r7
     ef2:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     ef4:	68 94       	set
     ef6:	66 24       	eor	r6, r6
     ef8:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     efa:	31 2c       	mov	r3, r1
     efc:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     efe:	0f 2e       	mov	r0, r31
     f00:	ff e1       	ldi	r31, 0x1F	; 31
     f02:	4f 2e       	mov	r4, r31
     f04:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     f06:	cc 24       	eor	r12, r12
     f08:	c3 94       	inc	r12
     f0a:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     f0c:	da c1       	rjmp	.+948    	; 0x12c2 <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     f0e:	d8 01       	movw	r26, r16
     f10:	8c 91       	ld	r24, X
     f12:	82 32       	cpi	r24, 0x22	; 34
     f14:	09 f4       	brne	.+2      	; 0xf18 <nwkRxTaskHandler+0x80>
     f16:	05 c1       	rjmp	.+522    	; 0x1122 <nwkRxTaskHandler+0x28a>
     f18:	18 f4       	brcc	.+6      	; 0xf20 <nwkRxTaskHandler+0x88>
     f1a:	80 32       	cpi	r24, 0x20	; 32
     f1c:	41 f0       	breq	.+16     	; 0xf2e <nwkRxTaskHandler+0x96>
     f1e:	d1 c1       	rjmp	.+930    	; 0x12c2 <nwkRxTaskHandler+0x42a>
     f20:	83 32       	cpi	r24, 0x23	; 35
     f22:	09 f4       	brne	.+2      	; 0xf26 <nwkRxTaskHandler+0x8e>
     f24:	c9 c1       	rjmp	.+914    	; 0x12b8 <nwkRxTaskHandler+0x420>
     f26:	84 32       	cpi	r24, 0x24	; 36
     f28:	09 f4       	brne	.+2      	; 0xf2c <nwkRxTaskHandler+0x94>
     f2a:	c9 c1       	rjmp	.+914    	; 0x12be <nwkRxTaskHandler+0x426>
     f2c:	ca c1       	rjmp	.+916    	; 0x12c2 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     f2e:	f8 01       	movw	r30, r16
     f30:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     f32:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     f34:	98 2f       	mov	r25, r24
     f36:	9a 70       	andi	r25, 0x0A	; 10
     f38:	09 f0       	breq	.+2      	; 0xf3c <nwkRxTaskHandler+0xa4>
     f3a:	c3 c1       	rjmp	.+902    	; 0x12c2 <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     f3c:	25 81       	ldd	r18, Z+5	; 0x05
     f3e:	36 81       	ldd	r19, Z+6	; 0x06
     f40:	2f 3f       	cpi	r18, 0xFF	; 255
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	91 f4       	brne	.+36     	; 0xf6a <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     f46:	d8 01       	movw	r26, r16
     f48:	1f 96       	adiw	r26, 0x0f	; 15
     f4a:	8d 91       	ld	r24, X+
     f4c:	9c 91       	ld	r25, X
     f4e:	50 97       	sbiw	r26, 0x10	; 16
     f50:	f7 01       	movw	r30, r14
     f52:	20 81       	ld	r18, Z
     f54:	31 81       	ldd	r19, Z+1	; 0x01
     f56:	28 17       	cp	r18, r24
     f58:	39 07       	cpc	r19, r25
     f5a:	19 f0       	breq	.+6      	; 0xf62 <nwkRxTaskHandler+0xca>
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <nwkRxTaskHandler+0xca>
     f60:	b0 c1       	rjmp	.+864    	; 0x12c2 <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     f62:	e2 e2       	ldi	r30, 0x22	; 34
     f64:	d8 01       	movw	r26, r16
     f66:	ec 93       	st	X, r30
     f68:	ac c1       	rjmp	.+856    	; 0x12c2 <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     f6a:	d8 01       	movw	r26, r16
     f6c:	1f 96       	adiw	r26, 0x0f	; 15
     f6e:	2d 91       	ld	r18, X+
     f70:	3c 91       	ld	r19, X
     f72:	50 97       	sbiw	r26, 0x10	; 16
     f74:	2f 3f       	cpi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	11 f4       	brne	.+4      	; 0xf7e <nwkRxTaskHandler+0xe6>
     f7a:	80 fd       	sbrc	r24, 0
     f7c:	a2 c1       	rjmp	.+836    	; 0x12c2 <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     f7e:	f7 01       	movw	r30, r14
     f80:	20 81       	ld	r18, Z
     f82:	31 81       	ldd	r19, Z+1	; 0x01
     f84:	d8 01       	movw	r26, r16
     f86:	1d 96       	adiw	r26, 0x0d	; 13
     f88:	8d 91       	ld	r24, X+
     f8a:	9c 91       	ld	r25, X
     f8c:	1e 97       	sbiw	r26, 0x0e	; 14
     f8e:	28 17       	cp	r18, r24
     f90:	39 07       	cpc	r19, r25
     f92:	09 f4       	brne	.+2      	; 0xf96 <nwkRxTaskHandler+0xfe>
     f94:	96 c1       	rjmp	.+812    	; 0x12c2 <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     f96:	c8 01       	movw	r24, r16
     f98:	fa dd       	rcall	.-1036   	; 0xb8e <nwkRouteFrameReceived>
     f9a:	e1 e2       	ldi	r30, 0x21	; 33
     f9c:	f9 e1       	ldi	r31, 0x19	; 25
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     fa2:	83 2c       	mov	r8, r3
     fa4:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     fa6:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     fa8:	44 81       	ldd	r20, Z+4	; 0x04
     faa:	44 23       	and	r20, r20
     fac:	09 f4       	brne	.+2      	; 0xfb0 <nwkRxTaskHandler+0x118>
     fae:	74 c0       	rjmp	.+232    	; 0x1098 <nwkRxTaskHandler+0x200>
     fb0:	d8 01       	movw	r26, r16
     fb2:	1d 96       	adiw	r26, 0x0d	; 13
     fb4:	6d 91       	ld	r22, X+
     fb6:	7c 91       	ld	r23, X
     fb8:	1e 97       	sbiw	r26, 0x0e	; 14
     fba:	40 81       	ld	r20, Z
     fbc:	51 81       	ldd	r21, Z+1	; 0x01
     fbe:	64 17       	cp	r22, r20
     fc0:	75 07       	cpc	r23, r21
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <nwkRxTaskHandler+0x12e>
     fc4:	6a c0       	rjmp	.+212    	; 0x109a <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     fc6:	1c 96       	adiw	r26, 0x0c	; 12
     fc8:	8c 91       	ld	r24, X
     fca:	1c 97       	sbiw	r26, 0x0c	; 12
     fcc:	f9 01       	movw	r30, r18
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	ef 5d       	subi	r30, 0xDF	; 223
     fdc:	f6 4e       	sbci	r31, 0xE6	; 230
     fde:	92 81       	ldd	r25, Z+2	; 0x02
     fe0:	98 1b       	sub	r25, r24

      if (diff < 8)
     fe2:	98 30       	cpi	r25, 0x08	; 8
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <nwkRxTaskHandler+0x150>
     fe6:	3e c0       	rjmp	.+124    	; 0x1064 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     fe8:	f9 01       	movw	r30, r18
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	e2 0f       	add	r30, r18
     ff4:	f3 1f       	adc	r31, r19
     ff6:	ef 5d       	subi	r30, 0xDF	; 223
     ff8:	f6 4e       	sbci	r31, 0xE6	; 230
     ffa:	83 81       	ldd	r24, Z+3	; 0x03
     ffc:	48 2f       	mov	r20, r24
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	09 2e       	mov	r0, r25
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <nwkRxTaskHandler+0x170>
    1004:	55 95       	asr	r21
    1006:	47 95       	ror	r20
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <nwkRxTaskHandler+0x16c>
    100c:	40 ff       	sbrs	r20, 0
    100e:	17 c0       	rjmp	.+46     	; 0x103e <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    1010:	f7 01       	movw	r30, r14
    1012:	20 81       	ld	r18, Z
    1014:	31 81       	ldd	r19, Z+1	; 0x01
    1016:	17 96       	adiw	r26, 0x07	; 7
    1018:	8d 91       	ld	r24, X+
    101a:	9c 91       	ld	r25, X
    101c:	18 97       	sbiw	r26, 0x08	; 8
    101e:	28 17       	cp	r18, r24
    1020:	39 07       	cpc	r19, r25
    1022:	09 f0       	breq	.+2      	; 0x1026 <nwkRxTaskHandler+0x18e>
    1024:	4e c1       	rjmp	.+668    	; 0x12c2 <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    1026:	1b 96       	adiw	r26, 0x0b	; 11
    1028:	6c 91       	ld	r22, X
    102a:	1b 97       	sbiw	r26, 0x0b	; 11
    102c:	63 fb       	bst	r22, 3
    102e:	66 27       	eor	r22, r22
    1030:	60 f9       	bld	r22, 0
    1032:	1f 96       	adiw	r26, 0x0f	; 15
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	50 97       	sbiw	r26, 0x10	; 16
    103a:	a4 dd       	rcall	.-1208   	; 0xb84 <nwkRouteRemove>
    103c:	42 c1       	rjmp	.+644    	; 0x12c2 <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    103e:	f9 01       	movw	r30, r18
    1040:	ee 0f       	add	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	2e 0f       	add	r18, r30
    104a:	3f 1f       	adc	r19, r31
    104c:	f9 01       	movw	r30, r18
    104e:	ef 5d       	subi	r30, 0xDF	; 223
    1050:	f6 4e       	sbci	r31, 0xE6	; 230
    1052:	96 01       	movw	r18, r12
    1054:	02 c0       	rjmp	.+4      	; 0x105a <nwkRxTaskHandler+0x1c2>
    1056:	22 0f       	add	r18, r18
    1058:	33 1f       	adc	r19, r19
    105a:	9a 95       	dec	r25
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <nwkRxTaskHandler+0x1be>
    105e:	82 2b       	or	r24, r18
    1060:	83 83       	std	Z+3, r24	; 0x03
    1062:	36 c1       	rjmp	.+620    	; 0x12d0 <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    1064:	f9 01       	movw	r30, r18
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	2e 0f       	add	r18, r30
    1070:	3f 1f       	adc	r19, r31
    1072:	f9 01       	movw	r30, r18
    1074:	ef 5d       	subi	r30, 0xDF	; 223
    1076:	f6 4e       	sbci	r31, 0xE6	; 230
    1078:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    107a:	83 81       	ldd	r24, Z+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	91 95       	neg	r25
    1082:	a9 01       	movw	r20, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <nwkRxTaskHandler+0x1f2>
    1086:	44 0f       	add	r20, r20
    1088:	55 1f       	adc	r21, r21
    108a:	9a 95       	dec	r25
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <nwkRxTaskHandler+0x1ee>
    108e:	ca 01       	movw	r24, r20
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1094:	44 82       	std	Z+4, r4	; 0x04
    1096:	1c c1       	rjmp	.+568    	; 0x12d0 <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
    1098:	4f 01       	movw	r8, r30
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    109e:	8a 30       	cpi	r24, 0x0A	; 10
    10a0:	91 05       	cpc	r25, r1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <nwkRxTaskHandler+0x20e>
    10a4:	80 cf       	rjmp	.-256    	; 0xfa6 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    10a6:	81 14       	cp	r8, r1
    10a8:	91 04       	cpc	r9, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <nwkRxTaskHandler+0x216>
    10ac:	0a c1       	rjmp	.+532    	; 0x12c2 <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    10ae:	d8 01       	movw	r26, r16
    10b0:	1d 96       	adiw	r26, 0x0d	; 13
    10b2:	8d 91       	ld	r24, X+
    10b4:	9c 91       	ld	r25, X
    10b6:	1e 97       	sbiw	r26, 0x0e	; 14
    10b8:	f4 01       	movw	r30, r8
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    10be:	1c 96       	adiw	r26, 0x0c	; 12
    10c0:	8c 91       	ld	r24, X
    10c2:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    10c4:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    10c6:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    10c8:	83 e1       	ldi	r24, 0x13	; 19
    10ca:	99 e1       	ldi	r25, 0x19	; 25
    10cc:	0a d5       	rcall	.+2580   	; 0x1ae2 <SYS_TimerStart>
    10ce:	00 c1       	rjmp	.+512    	; 0x12d0 <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    10d0:	d7 01       	movw	r26, r14
    10d2:	2d 91       	ld	r18, X+
    10d4:	3c 91       	ld	r19, X
    10d6:	f8 01       	movw	r30, r16
    10d8:	87 85       	ldd	r24, Z+15	; 0x0f
    10da:	90 89       	ldd	r25, Z+16	; 0x10
    10dc:	28 17       	cp	r18, r24
    10de:	39 07       	cpc	r19, r25
    10e0:	81 f0       	breq	.+32     	; 0x1102 <nwkRxTaskHandler+0x26a>
    10e2:	43 85       	ldd	r20, Z+11	; 0x0b
    10e4:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    10e6:	0b c0       	rjmp	.+22     	; 0x10fe <nwkRxTaskHandler+0x266>
    10e8:	c8 01       	movw	r24, r16
    10ea:	e1 d1       	rcall	.+962    	; 0x14ae <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    10ec:	d7 01       	movw	r26, r14
    10ee:	2d 91       	ld	r18, X+
    10f0:	3c 91       	ld	r19, X
    10f2:	f8 01       	movw	r30, r16
    10f4:	87 85       	ldd	r24, Z+15	; 0x0f
    10f6:	90 89       	ldd	r25, Z+16	; 0x10
    10f8:	28 17       	cp	r18, r24
    10fa:	39 07       	cpc	r19, r25
    10fc:	11 f0       	breq	.+4      	; 0x1102 <nwkRxTaskHandler+0x26a>
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	21 f4       	brne	.+8      	; 0x110a <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1102:	e2 e2       	ldi	r30, 0x22	; 34
    1104:	d8 01       	movw	r26, r16
    1106:	ec 93       	st	X, r30
    1108:	dc c0       	rjmp	.+440    	; 0x12c2 <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    110a:	d8 01       	movw	r26, r16
    110c:	17 96       	adiw	r26, 0x07	; 7
    110e:	8d 91       	ld	r24, X+
    1110:	9c 91       	ld	r25, X
    1112:	18 97       	sbiw	r26, 0x08	; 8
    1114:	82 17       	cp	r24, r18
    1116:	93 07       	cpc	r25, r19
    1118:	09 f0       	breq	.+2      	; 0x111c <nwkRxTaskHandler+0x284>
    111a:	d3 c0       	rjmp	.+422    	; 0x12c2 <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    111c:	e3 e2       	ldi	r30, 0x23	; 35
    111e:	ec 93       	st	X, r30
    1120:	d0 c0       	rjmp	.+416    	; 0x12c2 <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1122:	10 92 20 19 	sts	0x1920, r1	; 0x801920 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1126:	d8 01       	movw	r26, r16
    1128:	51 96       	adiw	r26, 0x11	; 17
    112a:	8c 91       	ld	r24, X
    112c:	51 97       	sbiw	r26, 0x11	; 17
    112e:	82 95       	swap	r24
    1130:	8f 70       	andi	r24, 0x0F	; 15
    1132:	e8 2f       	mov	r30, r24
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	e4 50       	subi	r30, 0x04	; 4
    113c:	f6 4e       	sbci	r31, 0xE6	; 230
    113e:	01 90       	ld	r0, Z+
    1140:	f0 81       	ld	r31, Z
    1142:	e0 2d       	mov	r30, r0
    1144:	30 97       	sbiw	r30, 0x00	; 0
    1146:	09 f4       	brne	.+2      	; 0x114a <nwkRxTaskHandler+0x2b2>
    1148:	60 c0       	rjmp	.+192    	; 0x120a <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    114a:	1d 96       	adiw	r26, 0x0d	; 13
    114c:	2d 91       	ld	r18, X+
    114e:	3c 91       	ld	r19, X
    1150:	1e 97       	sbiw	r26, 0x0e	; 14
    1152:	3a 83       	std	Y+2, r19	; 0x02
    1154:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1156:	1f 96       	adiw	r26, 0x0f	; 15
    1158:	4d 91       	ld	r20, X+
    115a:	5c 91       	ld	r21, X
    115c:	50 97       	sbiw	r26, 0x10	; 16
    115e:	5c 83       	std	Y+4, r21	; 0x04
    1160:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1162:	51 96       	adiw	r26, 0x11	; 17
    1164:	9c 91       	ld	r25, X
    1166:	51 97       	sbiw	r26, 0x11	; 17
    1168:	9f 70       	andi	r25, 0x0F	; 15
    116a:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    116c:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    116e:	af 57       	subi	r26, 0x7F	; 127
    1170:	bf 4f       	sbci	r27, 0xFF	; 255
    1172:	8d 91       	ld	r24, X+
    1174:	9c 91       	ld	r25, X
    1176:	99 87       	std	Y+9, r25	; 0x09
    1178:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    117a:	b8 01       	movw	r22, r16
    117c:	6e 5f       	subi	r22, 0xFE	; 254
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    1180:	86 1b       	sub	r24, r22
    1182:	97 0b       	sbc	r25, r23
    1184:	d8 01       	movw	r26, r16
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	9c 91       	ld	r25, X
    118a:	11 97       	sbiw	r26, 0x01	; 1
    118c:	98 1b       	sub	r25, r24
    118e:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    1190:	ad 57       	subi	r26, 0x7D	; 125
    1192:	bf 4f       	sbci	r27, 0xFF	; 255
    1194:	8c 91       	ld	r24, X
    1196:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	8c 91       	ld	r24, X
    119c:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    119e:	d8 01       	movw	r26, r16
    11a0:	1b 96       	adiw	r26, 0x0b	; 11
    11a2:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    11a4:	69 2f       	mov	r22, r25
    11a6:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    11a8:	92 fd       	sbrc	r25, 2
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <nwkRxTaskHandler+0x318>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <nwkRxTaskHandler+0x31a>
    11b0:	80 e2       	ldi	r24, 0x20	; 32
    11b2:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    11b4:	93 fd       	sbrc	r25, 3
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <nwkRxTaskHandler+0x324>
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <nwkRxTaskHandler+0x326>
    11bc:	90 e4       	ldi	r25, 0x40	; 64
    11be:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    11c0:	4f 3f       	cpi	r20, 0xFF	; 255
    11c2:	5f 4f       	sbci	r21, 0xFF	; 255
    11c4:	11 f0       	breq	.+4      	; 0x11ca <nwkRxTaskHandler+0x332>
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <nwkRxTaskHandler+0x334>
    11ca:	96 2d       	mov	r25, r6
    11cc:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    11ce:	d8 01       	movw	r26, r16
    11d0:	19 96       	adiw	r26, 0x09	; 9
    11d2:	4d 91       	ld	r20, X+
    11d4:	5c 91       	ld	r21, X
    11d6:	1a 97       	sbiw	r26, 0x0a	; 10
    11d8:	24 17       	cp	r18, r20
    11da:	35 07       	cpc	r19, r21
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <nwkRxTaskHandler+0x34a>
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <nwkRxTaskHandler+0x34c>
    11e2:	97 2d       	mov	r25, r7
    11e4:	89 2b       	or	r24, r25
    11e6:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    11e8:	d8 01       	movw	r26, r16
    11ea:	15 96       	adiw	r26, 0x05	; 5
    11ec:	2d 91       	ld	r18, X+
    11ee:	3c 91       	ld	r19, X
    11f0:	16 97       	sbiw	r26, 0x06	; 6
    11f2:	2f 3f       	cpi	r18, 0xFF	; 255
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	11 f0       	breq	.+4      	; 0x11fc <nwkRxTaskHandler+0x364>
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <nwkRxTaskHandler+0x366>
    11fc:	9a 2d       	mov	r25, r10
    11fe:	89 2b       	or	r24, r25
    1200:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1202:	ce 01       	movw	r24, r28
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	19 95       	eicall
    1208:	01 c0       	rjmp	.+2      	; 0x120c <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    120a:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    120c:	f8 01       	movw	r30, r16
    120e:	93 85       	ldd	r25, Z+11	; 0x0b
    1210:	90 ff       	sbrs	r25, 0
    ack = false;
    1212:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1214:	d8 01       	movw	r26, r16
    1216:	17 96       	adiw	r26, 0x07	; 7
    1218:	2d 91       	ld	r18, X+
    121a:	3c 91       	ld	r19, X
    121c:	18 97       	sbiw	r26, 0x08	; 8
    121e:	2f 3f       	cpi	r18, 0xFF	; 255
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	69 f4       	brne	.+26     	; 0x123e <nwkRxTaskHandler+0x3a6>
    1224:	f7 01       	movw	r30, r14
    1226:	40 81       	ld	r20, Z
    1228:	51 81       	ldd	r21, Z+1	; 0x01
    122a:	d8 01       	movw	r26, r16
    122c:	1f 96       	adiw	r26, 0x0f	; 15
    122e:	2d 91       	ld	r18, X+
    1230:	3c 91       	ld	r19, X
    1232:	50 97       	sbiw	r26, 0x10	; 16
    1234:	42 17       	cp	r20, r18
    1236:	53 07       	cpc	r21, r19
    1238:	11 f4       	brne	.+4      	; 0x123e <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    123a:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    123c:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    123e:	f8 01       	movw	r30, r16
    1240:	25 81       	ldd	r18, Z+5	; 0x05
    1242:	36 81       	ldd	r19, Z+6	; 0x06
    1244:	2f 3f       	cpi	r18, 0xFF	; 255
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	a1 f1       	breq	.+104    	; 0x12b2 <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    124a:	d7 01       	movw	r26, r14
    124c:	2d 91       	ld	r18, X+
    124e:	3c 91       	ld	r19, X
    1250:	2f 3f       	cpi	r18, 0xFF	; 255
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    1254:	71 f1       	breq	.+92     	; 0x12b2 <nwkRxTaskHandler+0x41a>
    1256:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1258:	61 f1       	breq	.+88     	; 0x12b2 <nwkRxTaskHandler+0x41a>
    125a:	90 db       	rcall	.-2272   	; 0x97c <nwkFrameAlloc>
    125c:	4c 01       	movw	r8, r24
    125e:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    1260:	41 f1       	breq	.+80     	; 0x12b2 <nwkRxTaskHandler+0x41a>
    1262:	f4 db       	rcall	.-2072   	; 0xa4c <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1264:	f4 01       	movw	r30, r8
    1266:	81 81       	ldd	r24, Z+1	; 0x01
    1268:	8d 5f       	subi	r24, 0xFD	; 253
    126a:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    126c:	e9 57       	subi	r30, 0x79	; 121
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	11 82       	std	Z+1, r1	; 0x01
    1272:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1274:	d8 01       	movw	r26, r16
    1276:	1b 96       	adiw	r26, 0x0b	; 11
    1278:	8c 91       	ld	r24, X
    127a:	1b 97       	sbiw	r26, 0x0b	; 11
    127c:	86 95       	lsr	r24
    127e:	81 70       	andi	r24, 0x01	; 1
    1280:	f4 01       	movw	r30, r8
    1282:	93 85       	ldd	r25, Z+11	; 0x0b
    1284:	80 fb       	bst	r24, 0
    1286:	91 f9       	bld	r25, 1
    1288:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    128a:	1d 96       	adiw	r26, 0x0d	; 13
    128c:	8d 91       	ld	r24, X+
    128e:	9c 91       	ld	r25, X
    1290:	1e 97       	sbiw	r26, 0x0e	; 14
    1292:	90 8b       	std	Z+16, r25	; 0x10
    1294:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1296:	ef 57       	subi	r30, 0x7F	; 127
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	01 90       	ld	r0, Z+
    129c:	f0 81       	ld	r31, Z
    129e:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    12a0:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    12a2:	80 91 20 19 	lds	r24, 0x1920	; 0x801920 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    12a6:	82 83       	std	Z+2, r24	; 0x02
    12a8:	1c 96       	adiw	r26, 0x0c	; 12
    12aa:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    12ac:	81 83       	std	Z+1, r24	; 0x01
    12ae:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    12b0:	b0 d0       	rcall	.+352    	; 0x1412 <nwkTxFrame>
    12b2:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    12b4:	bc 92       	st	X, r11
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <nwkRxTaskHandler+0x42a>
    12b8:	c8 01       	movw	r24, r16
      } break;
    12ba:	1e dd       	rcall	.-1476   	; 0xcf8 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <nwkRxTaskHandler+0x42a>
    12be:	c8 01       	movw	r24, r16
    12c0:	96 db       	rcall	.-2260   	; 0x9ee <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    12c2:	c8 01       	movw	r24, r16
    12c4:	9e db       	rcall	.-2244   	; 0xa02 <nwkFrameNext>
    12c6:	8c 01       	movw	r16, r24
    12c8:	89 2b       	or	r24, r25
    12ca:	09 f0       	breq	.+2      	; 0x12ce <nwkRxTaskHandler+0x436>
    12cc:	20 ce       	rjmp	.-960    	; 0xf0e <nwkRxTaskHandler+0x76>
    12ce:	07 c0       	rjmp	.+14     	; 0x12de <nwkRxTaskHandler+0x446>
    12d0:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    12d2:	87 81       	ldd	r24, Z+7	; 0x07
    12d4:	90 85       	ldd	r25, Z+8	; 0x08
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <nwkRxTaskHandler+0x444>
    12da:	08 cf       	rjmp	.-496    	; 0x10ec <nwkRxTaskHandler+0x254>
    12dc:	f9 ce       	rjmp	.-526    	; 0x10d0 <nwkRxTaskHandler+0x238>
    12de:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	bf 90       	pop	r11
    12fc:	af 90       	pop	r10
    12fe:	9f 90       	pop	r9
    1300:	8f 90       	pop	r8
    1302:	7f 90       	pop	r7
    1304:	6f 90       	pop	r6
    1306:	5f 90       	pop	r5
    1308:	4f 90       	pop	r4
    130a:	3f 90       	pop	r3
    130c:	2f 90       	pop	r2
    130e:	08 95       	ret

00001310 <nwkTxDelayTimerHandler>:
    1310:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	7c 01       	movw	r14, r24
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	01 e0       	ldi	r16, 0x01	; 1
    1324:	c3 e1       	ldi	r28, 0x13	; 19
    1326:	13 c0       	rjmp	.+38     	; 0x134e <nwkTxDelayTimerHandler+0x3e>
    1328:	fc 01       	movw	r30, r24
    132a:	20 81       	ld	r18, Z
    132c:	21 31       	cpi	r18, 0x11	; 17
    132e:	79 f4       	brne	.+30     	; 0x134e <nwkTxDelayTimerHandler+0x3e>
    1330:	ec 57       	subi	r30, 0x7C	; 124
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	20 81       	ld	r18, Z
    1336:	31 81       	ldd	r19, Z+1	; 0x01
    1338:	21 50       	subi	r18, 0x01	; 1
    133a:	31 09       	sbc	r19, r1
    133c:	31 83       	std	Z+1, r19	; 0x01
    133e:	20 83       	st	Z, r18
    1340:	23 2b       	or	r18, r19
    1342:	21 f4       	brne	.+8      	; 0x134c <nwkTxDelayTimerHandler+0x3c>
    1344:	fc 01       	movw	r30, r24
    1346:	c0 83       	st	Z, r28
    1348:	10 2f       	mov	r17, r16
    134a:	01 c0       	rjmp	.+2      	; 0x134e <nwkTxDelayTimerHandler+0x3e>
    134c:	10 2f       	mov	r17, r16
    134e:	59 db       	rcall	.-2382   	; 0xa02 <nwkFrameNext>
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	51 f7       	brne	.-44     	; 0x1328 <nwkTxDelayTimerHandler+0x18>
    1354:	11 23       	and	r17, r17
    1356:	11 f0       	breq	.+4      	; 0x135c <nwkTxDelayTimerHandler+0x4c>
    1358:	c7 01       	movw	r24, r14
    135a:	c3 d3       	rcall	.+1926   	; 0x1ae2 <SYS_TimerStart>
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	08 95       	ret

00001368 <nwkTxAckWaitTimerHandler>:
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	7c 01       	movw	r14, r24
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	01 e0       	ldi	r16, 0x01	; 1
    137e:	d7 e1       	ldi	r29, 0x17	; 23
    1380:	c0 e1       	ldi	r28, 0x10	; 16
    1382:	16 c0       	rjmp	.+44     	; 0x13b0 <nwkTxAckWaitTimerHandler+0x48>
    1384:	fc 01       	movw	r30, r24
    1386:	20 81       	ld	r18, Z
    1388:	26 31       	cpi	r18, 0x16	; 22
    138a:	91 f4       	brne	.+36     	; 0x13b0 <nwkTxAckWaitTimerHandler+0x48>
    138c:	ec 57       	subi	r30, 0x7C	; 124
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	20 81       	ld	r18, Z
    1392:	31 81       	ldd	r19, Z+1	; 0x01
    1394:	21 50       	subi	r18, 0x01	; 1
    1396:	31 09       	sbc	r19, r1
    1398:	31 83       	std	Z+1, r19	; 0x01
    139a:	20 83       	st	Z, r18
    139c:	23 2b       	or	r18, r19
    139e:	39 f4       	brne	.+14     	; 0x13ae <nwkTxAckWaitTimerHandler+0x46>
    13a0:	fc 01       	movw	r30, r24
    13a2:	d0 83       	st	Z, r29
    13a4:	ed 57       	subi	r30, 0x7D	; 125
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	c0 83       	st	Z, r28
    13aa:	10 2f       	mov	r17, r16
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <nwkTxAckWaitTimerHandler+0x48>
    13ae:	10 2f       	mov	r17, r16
    13b0:	28 db       	rcall	.-2480   	; 0xa02 <nwkFrameNext>
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	39 f7       	brne	.-50     	; 0x1384 <nwkTxAckWaitTimerHandler+0x1c>
    13b6:	11 23       	and	r17, r17
    13b8:	11 f0       	breq	.+4      	; 0x13be <nwkTxAckWaitTimerHandler+0x56>
    13ba:	c7 01       	movw	r24, r14
    13bc:	92 d3       	rcall	.+1828   	; 0x1ae2 <SYS_TimerStart>
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	08 95       	ret

000013cc <nwkTxInit>:
    13cc:	10 92 6e 19 	sts	0x196E, r1	; 0x80196e <nwkTxPhyActiveFrame+0x1>
    13d0:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <nwkTxPhyActiveFrame>
    13d4:	e0 e6       	ldi	r30, 0x60	; 96
    13d6:	f9 e1       	ldi	r31, 0x19	; 25
    13d8:	82 e3       	ldi	r24, 0x32	; 50
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a0 e0       	ldi	r26, 0x00	; 0
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	86 83       	std	Z+6, r24	; 0x06
    13e2:	97 83       	std	Z+7, r25	; 0x07
    13e4:	a0 87       	std	Z+8, r26	; 0x08
    13e6:	b1 87       	std	Z+9, r27	; 0x09
    13e8:	12 86       	std	Z+10, r1	; 0x0a
    13ea:	84 eb       	ldi	r24, 0xB4	; 180
    13ec:	99 e0       	ldi	r25, 0x09	; 9
    13ee:	94 87       	std	Z+12, r25	; 0x0c
    13f0:	83 87       	std	Z+11, r24	; 0x0b
    13f2:	e3 e5       	ldi	r30, 0x53	; 83
    13f4:	f9 e1       	ldi	r31, 0x19	; 25
    13f6:	8a e0       	ldi	r24, 0x0A	; 10
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e0       	ldi	r26, 0x00	; 0
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	86 83       	std	Z+6, r24	; 0x06
    1400:	97 83       	std	Z+7, r25	; 0x07
    1402:	a0 87       	std	Z+8, r26	; 0x08
    1404:	b1 87       	std	Z+9, r27	; 0x09
    1406:	12 86       	std	Z+10, r1	; 0x0a
    1408:	88 e8       	ldi	r24, 0x88	; 136
    140a:	99 e0       	ldi	r25, 0x09	; 9
    140c:	94 87       	std	Z+12, r25	; 0x0c
    140e:	83 87       	std	Z+11, r24	; 0x0b
    1410:	08 95       	ret

00001412 <nwkTxFrame>:
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	ec 01       	movw	r28, r24
    1418:	fc 01       	movw	r30, r24
    141a:	ea 57       	subi	r30, 0x7A	; 122
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	81 ff       	sbrs	r24, 1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <nwkTxFrame+0x18>
    1424:	92 e1       	ldi	r25, 0x12	; 18
    1426:	98 83       	st	Y, r25
    1428:	02 c0       	rjmp	.+4      	; 0x142e <nwkTxFrame+0x1c>
    142a:	92 e1       	ldi	r25, 0x12	; 18
    142c:	98 83       	st	Y, r25
    142e:	fe 01       	movw	r30, r28
    1430:	ed 57       	subi	r30, 0x7D	; 125
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	10 82       	st	Z, r1
    1436:	80 ff       	sbrs	r24, 0
    1438:	05 c0       	rjmp	.+10     	; 0x1444 <nwkTxFrame+0x32>
    143a:	2f ef       	ldi	r18, 0xFF	; 255
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	3e 83       	std	Y+6, r19	; 0x06
    1440:	2d 83       	std	Y+5, r18	; 0x05
    1442:	06 c0       	rjmp	.+12     	; 0x1450 <nwkTxFrame+0x3e>
    1444:	20 91 f8 19 	lds	r18, 0x19F8	; 0x8019f8 <nwkIb+0x2>
    1448:	30 91 f9 19 	lds	r19, 0x19F9	; 0x8019f9 <nwkIb+0x3>
    144c:	3e 83       	std	Y+6, r19	; 0x06
    144e:	2d 83       	std	Y+5, r18	; 0x05
    1450:	85 70       	andi	r24, 0x05	; 5
    1452:	19 f4       	brne	.+6      	; 0x145a <nwkTxFrame+0x48>
    1454:	ce 01       	movw	r24, r28
    1456:	31 dc       	rcall	.-1950   	; 0xcba <nwkRoutePrepareTx>
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <nwkTxFrame+0x50>
    145a:	8f 85       	ldd	r24, Y+15	; 0x0f
    145c:	98 89       	ldd	r25, Y+16	; 0x10
    145e:	98 87       	std	Y+8, r25	; 0x08
    1460:	8f 83       	std	Y+7, r24	; 0x07
    1462:	e6 ef       	ldi	r30, 0xF6	; 246
    1464:	f9 e1       	ldi	r31, 0x19	; 25
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	9a 87       	std	Y+10, r25	; 0x0a
    146c:	89 87       	std	Y+9, r24	; 0x09
    146e:	85 81       	ldd	r24, Z+5	; 0x05
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	85 83       	std	Z+5, r24	; 0x05
    1474:	8c 83       	std	Y+4, r24	; 0x04
    1476:	8f 81       	ldd	r24, Y+7	; 0x07
    1478:	98 85       	ldd	r25, Y+8	; 0x08
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	69 f4       	brne	.+26     	; 0x1498 <nwkTxFrame+0x86>
    147e:	81 e4       	ldi	r24, 0x41	; 65
    1480:	98 e8       	ldi	r25, 0x88	; 136
    1482:	9b 83       	std	Y+3, r25	; 0x03
    1484:	8a 83       	std	Y+2, r24	; 0x02
    1486:	0c d4       	rcall	.+2072   	; 0x1ca0 <rand>
    1488:	cc 57       	subi	r28, 0x7C	; 124
    148a:	df 4f       	sbci	r29, 0xFF	; 255
    148c:	87 70       	andi	r24, 0x07	; 7
    148e:	99 27       	eor	r25, r25
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	99 83       	std	Y+1, r25	; 0x01
    1494:	88 83       	st	Y, r24
    1496:	08 c0       	rjmp	.+16     	; 0x14a8 <nwkTxFrame+0x96>
    1498:	81 e6       	ldi	r24, 0x61	; 97
    149a:	98 e8       	ldi	r25, 0x88	; 136
    149c:	9b 83       	std	Y+3, r25	; 0x03
    149e:	8a 83       	std	Y+2, r24	; 0x02
    14a0:	cc 57       	subi	r28, 0x7C	; 124
    14a2:	df 4f       	sbci	r29, 0xFF	; 255
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	18 82       	st	Y, r1
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <nwkTxBroadcastFrame>:
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	8c 01       	movw	r16, r24
    14b8:	61 da       	rcall	.-2878   	; 0x97c <nwkFrameAlloc>
    14ba:	ec 01       	movw	r28, r24
    14bc:	89 2b       	or	r24, r25
    14be:	a9 f1       	breq	.+106    	; 0x152a <nwkTxBroadcastFrame+0x7c>
    14c0:	82 e1       	ldi	r24, 0x12	; 18
    14c2:	88 83       	st	Y, r24
    14c4:	f8 01       	movw	r30, r16
    14c6:	81 81       	ldd	r24, Z+1	; 0x01
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	fe 01       	movw	r30, r28
    14cc:	ed 57       	subi	r30, 0x7D	; 125
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	10 82       	st	Z, r1
    14d2:	e6 d3       	rcall	.+1996   	; 0x1ca0 <rand>
    14d4:	fe 01       	movw	r30, r28
    14d6:	ec 57       	subi	r30, 0x7C	; 124
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	87 70       	andi	r24, 0x07	; 7
    14dc:	99 27       	eor	r25, r25
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    14e4:	33 96       	adiw	r30, 0x03	; 3
    14e6:	11 82       	std	Z+1, r1	; 0x01
    14e8:	10 82       	st	Z, r1
    14ea:	f8 01       	movw	r30, r16
    14ec:	41 81       	ldd	r20, Z+1	; 0x01
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	b8 01       	movw	r22, r16
    14f2:	6e 5f       	subi	r22, 0xFE	; 254
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	ce 01       	movw	r24, r28
    14f8:	02 96       	adiw	r24, 0x02	; 2
    14fa:	e0 d3       	rcall	.+1984   	; 0x1cbc <memcpy>
    14fc:	81 e4       	ldi	r24, 0x41	; 65
    14fe:	98 e8       	ldi	r25, 0x88	; 136
    1500:	9b 83       	std	Y+3, r25	; 0x03
    1502:	8a 83       	std	Y+2, r24	; 0x02
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    1508:	98 87       	std	Y+8, r25	; 0x08
    150a:	8f 83       	std	Y+7, r24	; 0x07
    150c:	f8 01       	movw	r30, r16
    150e:	85 81       	ldd	r24, Z+5	; 0x05
    1510:	96 81       	ldd	r25, Z+6	; 0x06
    1512:	9e 83       	std	Y+6, r25	; 0x06
    1514:	8d 83       	std	Y+5, r24	; 0x05
    1516:	e6 ef       	ldi	r30, 0xF6	; 246
    1518:	f9 e1       	ldi	r31, 0x19	; 25
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	9a 87       	std	Y+10, r25	; 0x0a
    1520:	89 87       	std	Y+9, r24	; 0x09
    1522:	85 81       	ldd	r24, Z+5	; 0x05
    1524:	8f 5f       	subi	r24, 0xFF	; 255
    1526:	85 83       	std	Z+5, r24	; 0x05
    1528:	8c 83       	std	Y+4, r24	; 0x04
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	08 95       	ret

00001534 <nwkTxAckReceived>:
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	fc 01       	movw	r30, r24
    153a:	21 85       	ldd	r18, Z+9	; 0x09
    153c:	23 30       	cpi	r18, 0x03	; 3
    153e:	d9 f4       	brne	.+54     	; 0x1576 <nwkTxAckReceived+0x42>
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <nwkTxAckReceived+0x2e>
    1542:	fc 01       	movw	r30, r24
    1544:	20 81       	ld	r18, Z
    1546:	26 31       	cpi	r18, 0x16	; 22
    1548:	89 f4       	brne	.+34     	; 0x156c <nwkTxAckReceived+0x38>
    154a:	34 85       	ldd	r19, Z+12	; 0x0c
    154c:	29 81       	ldd	r18, Y+1	; 0x01
    154e:	32 13       	cpse	r19, r18
    1550:	0d c0       	rjmp	.+26     	; 0x156c <nwkTxAckReceived+0x38>
    1552:	27 e1       	ldi	r18, 0x17	; 23
    1554:	20 83       	st	Z, r18
    1556:	2a 81       	ldd	r18, Y+2	; 0x02
    1558:	ea 57       	subi	r30, 0x7A	; 122
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	20 83       	st	Z, r18
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	0b c0       	rjmp	.+22     	; 0x1578 <nwkTxAckReceived+0x44>
    1562:	fc 01       	movw	r30, r24
    1564:	c7 81       	ldd	r28, Z+7	; 0x07
    1566:	d0 85       	ldd	r29, Z+8	; 0x08
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	4a da       	rcall	.-2924   	; 0xa02 <nwkFrameNext>
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	41 f7       	brne	.-48     	; 0x1542 <nwkTxAckReceived+0xe>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <nwkTxAckReceived+0x44>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    157e:	e0 91 6d 19 	lds	r30, 0x196D	; 0x80196d <nwkTxPhyActiveFrame>
    1582:	f0 91 6e 19 	lds	r31, 0x196E	; 0x80196e <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	21 f0       	breq	.+8      	; 0x1592 <PHY_DataConf+0x14>
    158a:	48 f0       	brcs	.+18     	; 0x159e <PHY_DataConf+0x20>
    158c:	82 30       	cpi	r24, 0x02	; 2
    158e:	19 f0       	breq	.+6      	; 0x1596 <PHY_DataConf+0x18>
    1590:	04 c0       	rjmp	.+8      	; 0x159a <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1592:	80 e2       	ldi	r24, 0x20	; 32
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1596:	81 e2       	ldi	r24, 0x21	; 33
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    159e:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    15a0:	df 01       	movw	r26, r30
    15a2:	ad 57       	subi	r26, 0x7D	; 125
    15a4:	bf 4f       	sbci	r27, 0xFF	; 255
    15a6:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    15a8:	85 e1       	ldi	r24, 0x15	; 21
    15aa:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    15ac:	10 92 6e 19 	sts	0x196E, r1	; 0x80196e <nwkTxPhyActiveFrame+0x1>
    15b0:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    15b4:	e6 ef       	ldi	r30, 0xF6	; 246
    15b6:	f9 e1       	ldi	r31, 0x19	; 25
    15b8:	86 a1       	ldd	r24, Z+38	; 0x26
    15ba:	97 a1       	ldd	r25, Z+39	; 0x27
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	97 a3       	std	Z+39, r25	; 0x27
    15c0:	86 a3       	std	Z+38, r24	; 0x26
    15c2:	08 95       	ret

000015c4 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    15c4:	9f 92       	push	r9
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    15da:	c0 e0       	ldi	r28, 0x00	; 0
    15dc:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    15de:	0f 2e       	mov	r0, r31
    15e0:	f4 e1       	ldi	r31, 0x14	; 20
    15e2:	af 2e       	mov	r10, r31
    15e4:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    15e6:	06 ef       	ldi	r16, 0xF6	; 246
    15e8:	19 e1       	ldi	r17, 0x19	; 25
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    15ea:	0f 2e       	mov	r0, r31
    15ec:	f7 e1       	ldi	r31, 0x17	; 23
    15ee:	df 2e       	mov	r13, r31
    15f0:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    15f2:	0f 2e       	mov	r0, r31
    15f4:	f6 e1       	ldi	r31, 0x16	; 22
    15f6:	9f 2e       	mov	r9, r31
    15f8:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15fa:	0f 2e       	mov	r0, r31
    15fc:	f9 e2       	ldi	r31, 0x29	; 41
    15fe:	ef 2e       	mov	r14, r31
    1600:	f1 2c       	mov	r15, r1
    1602:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1604:	0f 2e       	mov	r0, r31
    1606:	f3 e1       	ldi	r31, 0x13	; 19
    1608:	cf 2e       	mov	r12, r31
    160a:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    160c:	0f 2e       	mov	r0, r31
    160e:	f1 e1       	ldi	r31, 0x11	; 17
    1610:	bf 2e       	mov	r11, r31
    1612:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1614:	60 c0       	rjmp	.+192    	; 0x16d6 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    1616:	88 81       	ld	r24, Y
    1618:	83 31       	cpi	r24, 0x13	; 19
    161a:	c1 f0       	breq	.+48     	; 0x164c <nwkTxTaskHandler+0x88>
    161c:	18 f4       	brcc	.+6      	; 0x1624 <nwkTxTaskHandler+0x60>
    161e:	82 31       	cpi	r24, 0x12	; 18
    1620:	39 f0       	breq	.+14     	; 0x1630 <nwkTxTaskHandler+0x6c>
    1622:	59 c0       	rjmp	.+178    	; 0x16d6 <nwkTxTaskHandler+0x112>
    1624:	85 31       	cpi	r24, 0x15	; 21
    1626:	49 f1       	breq	.+82     	; 0x167a <nwkTxTaskHandler+0xb6>
    1628:	87 31       	cpi	r24, 0x17	; 23
    162a:	09 f4       	brne	.+2      	; 0x162e <nwkTxTaskHandler+0x6a>
    162c:	45 c0       	rjmp	.+138    	; 0x16b8 <nwkTxTaskHandler+0xf4>
    162e:	53 c0       	rjmp	.+166    	; 0x16d6 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1630:	fe 01       	movw	r30, r28
    1632:	ec 57       	subi	r30, 0x7C	; 124
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	89 2b       	or	r24, r25
    163c:	29 f0       	breq	.+10     	; 0x1648 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    163e:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1640:	83 e5       	ldi	r24, 0x53	; 83
    1642:	99 e1       	ldi	r25, 0x19	; 25
    1644:	4e d2       	rcall	.+1180   	; 0x1ae2 <SYS_TimerStart>
    1646:	47 c0       	rjmp	.+142    	; 0x16d6 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1648:	c8 82       	st	Y, r12
    164a:	45 c0       	rjmp	.+138    	; 0x16d6 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    164c:	80 91 6d 19 	lds	r24, 0x196D	; 0x80196d <nwkTxPhyActiveFrame>
    1650:	90 91 6e 19 	lds	r25, 0x196E	; 0x80196e <nwkTxPhyActiveFrame+0x1>
    1654:	89 2b       	or	r24, r25
    1656:	09 f0       	breq	.+2      	; 0x165a <nwkTxTaskHandler+0x96>
    1658:	3e c0       	rjmp	.+124    	; 0x16d6 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    165a:	d0 93 6e 19 	sts	0x196E, r29	; 0x80196e <nwkTxPhyActiveFrame+0x1>
    165e:	c0 93 6d 19 	sts	0x196D, r28	; 0x80196d <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1662:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    1664:	69 81       	ldd	r22, Y+1	; 0x01
    1666:	ce 01       	movw	r24, r28
    1668:	02 96       	adiw	r24, 0x02	; 2
    166a:	cb d0       	rcall	.+406    	; 0x1802 <PHY_DataReq>
          nwkIb.lock++;
    166c:	f8 01       	movw	r30, r16
    166e:	86 a1       	ldd	r24, Z+38	; 0x26
    1670:	97 a1       	ldd	r25, Z+39	; 0x27
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	97 a3       	std	Z+39, r25	; 0x27
    1676:	86 a3       	std	Z+38, r24	; 0x26
    1678:	2e c0       	rjmp	.+92     	; 0x16d6 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    167a:	fe 01       	movw	r30, r28
    167c:	ed 57       	subi	r30, 0x7D	; 125
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	80 81       	ld	r24, Z
    1682:	81 11       	cpse	r24, r1
    1684:	17 c0       	rjmp	.+46     	; 0x16b4 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    1686:	2d 85       	ldd	r18, Y+13	; 0x0d
    1688:	3e 85       	ldd	r19, Y+14	; 0x0e
    168a:	f8 01       	movw	r30, r16
    168c:	80 81       	ld	r24, Z
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	28 17       	cp	r18, r24
    1692:	39 07       	cpc	r19, r25
    1694:	69 f4       	brne	.+26     	; 0x16b0 <nwkTxTaskHandler+0xec>
    1696:	8b 85       	ldd	r24, Y+11	; 0x0b
    1698:	80 ff       	sbrs	r24, 0
    169a:	0a c0       	rjmp	.+20     	; 0x16b0 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    169c:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    169e:	fe 01       	movw	r30, r28
    16a0:	ec 57       	subi	r30, 0x7C	; 124
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	f1 82       	std	Z+1, r15	; 0x01
    16a6:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    16a8:	80 e6       	ldi	r24, 0x60	; 96
    16aa:	99 e1       	ldi	r25, 0x19	; 25
    16ac:	1a d2       	rcall	.+1076   	; 0x1ae2 <SYS_TimerStart>
    16ae:	13 c0       	rjmp	.+38     	; 0x16d6 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    16b0:	d8 82       	st	Y, r13
    16b2:	11 c0       	rjmp	.+34     	; 0x16d6 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    16b4:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <nwkTxTaskHandler+0x112>
    16b8:	ce 01       	movw	r24, r28
    16ba:	b8 da       	rcall	.-2704   	; 0xc2c <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    16bc:	fe 01       	movw	r30, r28
    16be:	e9 57       	subi	r30, 0x79	; 121
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	01 90       	ld	r0, Z+
    16c4:	f0 81       	ld	r31, Z
    16c6:	e0 2d       	mov	r30, r0
    16c8:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    16ca:	19 f4       	brne	.+6      	; 0x16d2 <nwkTxTaskHandler+0x10e>
    16cc:	ce 01       	movw	r24, r28
    16ce:	8f d9       	rcall	.-3298   	; 0x9ee <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <nwkTxTaskHandler+0x112>
    16d2:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    16d4:	19 95       	eicall
    16d6:	ce 01       	movw	r24, r28
    16d8:	94 d9       	rcall	.-3288   	; 0xa02 <nwkFrameNext>
    16da:	ec 01       	movw	r28, r24
    16dc:	89 2b       	or	r24, r25
    16de:	09 f0       	breq	.+2      	; 0x16e2 <nwkTxTaskHandler+0x11e>
    16e0:	9a cf       	rjmp	.-204    	; 0x1616 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	08 95       	ret

000016fa <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    16fa:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <phyBand>
    16fe:	98 2f       	mov	r25, r24
    1700:	9f 70       	andi	r25, 0x0F	; 15
    1702:	e4 e5       	ldi	r30, 0x54	; 84
    1704:	f1 e0       	ldi	r31, 0x01	; 1
    1706:	80 81       	ld	r24, Z
    1708:	80 7f       	andi	r24, 0xF0	; 240
    170a:	89 2b       	or	r24, r25
    170c:	80 83       	st	Z, r24
    170e:	80 91 6f 19 	lds	r24, 0x196F	; 0x80196f <phyBand>
    1712:	88 23       	and	r24, r24
    1714:	29 f0       	breq	.+10     	; 0x1720 <phySetChannel+0x26>
    1716:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <phyChannel>
    171a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    171e:	08 95       	ret
    1720:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <phyChannel>
    1724:	98 2f       	mov	r25, r24
    1726:	9f 71       	andi	r25, 0x1F	; 31
    1728:	e8 e4       	ldi	r30, 0x48	; 72
    172a:	f1 e0       	ldi	r31, 0x01	; 1
    172c:	80 81       	ld	r24, Z
    172e:	80 7e       	andi	r24, 0xE0	; 224
    1730:	89 2b       	or	r24, r25
    1732:	80 83       	st	Z, r24
    1734:	08 95       	ret

00001736 <phyTrxSetState>:
    1736:	93 e0       	ldi	r25, 0x03	; 3
    1738:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    173c:	e1 e4       	ldi	r30, 0x41	; 65
    173e:	f1 e0       	ldi	r31, 0x01	; 1
    1740:	90 81       	ld	r25, Z
    1742:	9f 71       	andi	r25, 0x1F	; 31
    1744:	98 30       	cpi	r25, 0x08	; 8
    1746:	e1 f7       	brne	.-8      	; 0x1740 <phyTrxSetState+0xa>
    1748:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    174c:	e1 e4       	ldi	r30, 0x41	; 65
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	90 81       	ld	r25, Z
    1752:	9f 71       	andi	r25, 0x1F	; 31
    1754:	89 13       	cpse	r24, r25
    1756:	fc cf       	rjmp	.-8      	; 0x1750 <phyTrxSetState+0x1a>
    1758:	08 95       	ret

0000175a <phySetRxState>:
    175a:	88 e0       	ldi	r24, 0x08	; 8
    175c:	ec df       	rcall	.-40     	; 0x1736 <phyTrxSetState>
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1764:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <phyRxState>
    1768:	88 23       	and	r24, r24
    176a:	11 f0       	breq	.+4      	; 0x1770 <phySetRxState+0x16>
    176c:	86 e1       	ldi	r24, 0x16	; 22
    176e:	e3 cf       	rjmp	.-58     	; 0x1736 <phyTrxSetState>
    1770:	08 95       	ret

00001772 <PHY_Init>:
    1772:	e9 e3       	ldi	r30, 0x39	; 57
    1774:	f1 e0       	ldi	r31, 0x01	; 1
    1776:	80 81       	ld	r24, Z
    1778:	81 60       	ori	r24, 0x01	; 1
    177a:	80 83       	st	Z, r24
    177c:	10 92 71 19 	sts	0x1971, r1	; 0x801971 <phyRxState>
    1780:	10 92 6f 19 	sts	0x196F, r1	; 0x80196f <phyBand>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <phyState>
    178a:	88 e0       	ldi	r24, 0x08	; 8
    178c:	d4 df       	rcall	.-88     	; 0x1736 <phyTrxSetState>
    178e:	8b ee       	ldi	r24, 0xEB	; 235
    1790:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    1794:	ec e4       	ldi	r30, 0x4C	; 76
    1796:	f1 e0       	ldi	r31, 0x01	; 1
    1798:	80 81       	ld	r24, Z
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	80 83       	st	Z, r24
    179e:	08 95       	ret

000017a0 <PHY_SetRxState>:
    17a0:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <phyRxState>
    17a4:	da cf       	rjmp	.-76     	; 0x175a <phySetRxState>
    17a6:	08 95       	ret

000017a8 <PHY_SetChannel>:
    17a8:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <phyChannel>
    17ac:	a6 cf       	rjmp	.-180    	; 0x16fa <phySetChannel>
    17ae:	08 95       	ret

000017b0 <PHY_SetPanId>:
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	1f 92       	push	r1
    17b6:	1f 92       	push	r1
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <PHY_SetShortAddr>:
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	1f 92       	push	r1
    17da:	1f 92       	push	r1
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    17ee:	99 81       	ldd	r25, Y+1	; 0x01
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	89 0f       	add	r24, r25
    17f4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	18 2f       	mov	r17, r24
    180a:	d9 2f       	mov	r29, r25
    180c:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    180e:	89 e1       	ldi	r24, 0x19	; 25
    1810:	92 df       	rcall	.-220    	; 0x1736 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	8c 0f       	add	r24, r28
    181c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    1820:	cc 23       	and	r28, r28
    1822:	71 f0       	breq	.+28     	; 0x1840 <PHY_DataReq+0x3e>
    1824:	a1 2f       	mov	r26, r17
    1826:	bd 2f       	mov	r27, r29
    1828:	c1 50       	subi	r28, 0x01	; 1
    182a:	6c 2f       	mov	r22, r28
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	6e 57       	subi	r22, 0x7E	; 126
    1830:	7e 4f       	sbci	r23, 0xFE	; 254
    1832:	e1 e8       	ldi	r30, 0x81	; 129
    1834:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    1836:	8d 91       	ld	r24, X+
    1838:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    183a:	e6 17       	cp	r30, r22
    183c:	f7 07       	cpc	r31, r23
    183e:	d9 f7       	brne	.-10     	; 0x1836 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	08 95       	ret

00001854 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	00 d0       	rcall	.+0      	; 0x185c <PHY_TaskHandler+0x8>
    185c:	1f 92       	push	r1
    185e:	1f 92       	push	r1
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    1864:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <phyState>
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	09 f4       	brne	.+2      	; 0x186e <PHY_TaskHandler+0x1a>
    186c:	65 c0       	rjmp	.+202    	; 0x1938 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    186e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1872:	83 ff       	sbrs	r24, 3
    1874:	3e c0       	rjmp	.+124    	; 0x18f2 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    1876:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    187a:	6a 2f       	mov	r22, r26
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	ab 01       	movw	r20, r22
    1880:	4f 5f       	subi	r20, 0xFF	; 255
    1882:	5f 4f       	sbci	r21, 0xFF	; 255
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    188a:	fc 01       	movw	r30, r24
    188c:	e0 58       	subi	r30, 0x80	; 128
    188e:	fe 4f       	sbci	r31, 0xFE	; 254
    1890:	30 81       	ld	r19, Z
    1892:	fc 01       	movw	r30, r24
    1894:	ee 58       	subi	r30, 0x8E	; 142
    1896:	f6 4e       	sbci	r31, 0xE6	; 230
    1898:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    189a:	2f 5f       	subi	r18, 0xFF	; 255
    189c:	82 2f       	mov	r24, r18
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	84 17       	cp	r24, r20
    18a2:	95 07       	cpc	r25, r21
    18a4:	94 f3       	brlt	.-28     	; 0x188a <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    18a6:	82 e7       	ldi	r24, 0x72	; 114
    18a8:	99 e1       	ldi	r25, 0x19	; 25
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    18ae:	a2 50       	subi	r26, 0x02	; 2
    18b0:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    18b2:	fb 01       	movw	r30, r22
    18b4:	ee 58       	subi	r30, 0x8E	; 142
    18b6:	f6 4e       	sbci	r31, 0xE6	; 230
    18b8:	80 81       	ld	r24, Z
    18ba:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    18bc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    18c0:	8a 55       	subi	r24, 0x5A	; 90
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    18c4:	ce 01       	movw	r24, r28
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	bd da       	rcall	.-2694   	; 0xe44 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    18ca:	e1 e4       	ldi	r30, 0x41	; 65
    18cc:	f1 e0       	ldi	r31, 0x01	; 1
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 71       	andi	r24, 0x1F	; 31
    18d2:	86 31       	cpi	r24, 0x16	; 22
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    18d6:	ef e4       	ldi	r30, 0x4F	; 79
    18d8:	f1 e0       	ldi	r31, 0x01	; 1
    18da:	80 81       	ld	r24, Z
    18dc:	88 60       	ori	r24, 0x08	; 8
    18de:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    18e0:	ec e4       	ldi	r30, 0x4C	; 76
    18e2:	f1 e0       	ldi	r31, 0x01	; 1
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    18ea:	80 81       	ld	r24, Z
    18ec:	80 68       	ori	r24, 0x80	; 128
    18ee:	80 83       	st	Z, r24
    18f0:	23 c0       	rjmp	.+70     	; 0x1938 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    18f2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    18f6:	86 ff       	sbrs	r24, 6
    18f8:	1f c0       	rjmp	.+62     	; 0x1938 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    18fa:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    18fe:	8f 71       	andi	r24, 0x1F	; 31
    1900:	89 31       	cpi	r24, 0x19	; 25
    1902:	a9 f4       	brne	.+42     	; 0x192e <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    1904:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1908:	12 95       	swap	r17
    190a:	16 95       	lsr	r17
    190c:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    190e:	49 f0       	breq	.+18     	; 0x1922 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1910:	13 30       	cpi	r17, 0x03	; 3
    1912:	21 f0       	breq	.+8      	; 0x191c <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    1914:	15 30       	cpi	r17, 0x05	; 5
    1916:	21 f0       	breq	.+8      	; 0x1920 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1918:	13 e0       	ldi	r17, 0x03	; 3
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    191c:	11 e0       	ldi	r17, 0x01	; 1
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    1920:	12 e0       	ldi	r17, 0x02	; 2
    1922:	1b df       	rcall	.-458    	; 0x175a <phySetRxState>
      phyState = PHY_STATE_IDLE;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <phyState>

      PHY_DataConf(status);
    192a:	81 2f       	mov	r24, r17
    192c:	28 de       	rcall	.-944    	; 0x157e <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    192e:	ef e4       	ldi	r30, 0x4F	; 79
    1930:	f1 e0       	ldi	r31, 0x01	; 1
    1932:	80 81       	ld	r24, Z
    1934:	80 64       	ori	r24, 0x40	; 64
    1936:	80 83       	st	Z, r24
  }
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	08 95       	ret

0000194a <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    194a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <HAL_Init>
  SYS_TimerInit();
    194e:	6d d0       	rcall	.+218    	; 0x1a2a <SYS_TimerInit>
  PHY_Init();
    1950:	10 df       	rcall	.-480    	; 0x1772 <PHY_Init>
    1952:	0c 94 92 03 	jmp	0x724	; 0x724 <NWK_Init>
  NWK_Init();
    1956:	08 95       	ret

00001958 <SYS_TaskHandler>:
    1958:	7d df       	rcall	.-262    	; 0x1854 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    195a:	0e 94 c0 03 	call	0x780	; 0x780 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    195e:	cc c0       	rjmp	.+408    	; 0x1af8 <SYS_TimerTaskHandler>
    1960:	08 95       	ret

00001962 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	ec 01       	movw	r28, r24
  if (timers)
    196c:	80 91 f3 19 	lds	r24, 0x19F3	; 0x8019f3 <timers>
    1970:	90 91 f4 19 	lds	r25, 0x19F4	; 0x8019f4 <timers+0x1>
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	09 f4       	brne	.+2      	; 0x197a <placeTimer+0x18>
    1978:	45 c0       	rjmp	.+138    	; 0x1a04 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    197a:	4e 81       	ldd	r20, Y+6	; 0x06
    197c:	5f 81       	ldd	r21, Y+7	; 0x07
    197e:	68 85       	ldd	r22, Y+8	; 0x08
    1980:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1982:	fc 01       	movw	r30, r24
    1984:	02 81       	ldd	r16, Z+2	; 0x02
    1986:	13 81       	ldd	r17, Z+3	; 0x03
    1988:	24 81       	ldd	r18, Z+4	; 0x04
    198a:	35 81       	ldd	r19, Z+5	; 0x05
    198c:	40 17       	cp	r20, r16
    198e:	51 07       	cpc	r21, r17
    1990:	62 07       	cpc	r22, r18
    1992:	73 07       	cpc	r23, r19
    1994:	60 f0       	brcs	.+24     	; 0x19ae <placeTimer+0x4c>
    1996:	dc 01       	movw	r26, r24
    1998:	17 c0       	rjmp	.+46     	; 0x19c8 <placeTimer+0x66>
    199a:	02 81       	ldd	r16, Z+2	; 0x02
    199c:	13 81       	ldd	r17, Z+3	; 0x03
    199e:	24 81       	ldd	r18, Z+4	; 0x04
    19a0:	35 81       	ldd	r19, Z+5	; 0x05
    19a2:	40 17       	cp	r20, r16
    19a4:	51 07       	cpc	r21, r17
    19a6:	62 07       	cpc	r22, r18
    19a8:	73 07       	cpc	r23, r19
    19aa:	68 f4       	brcc	.+26     	; 0x19c6 <placeTimer+0x64>
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    19ae:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    19b0:	a0 e0       	ldi	r26, 0x00	; 0
    19b2:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    19b4:	04 1b       	sub	r16, r20
    19b6:	15 0b       	sbc	r17, r21
    19b8:	26 0b       	sbc	r18, r22
    19ba:	37 0b       	sbc	r19, r23
    19bc:	02 83       	std	Z+2, r16	; 0x02
    19be:	13 83       	std	Z+3, r17	; 0x03
    19c0:	24 83       	std	Z+4, r18	; 0x04
    19c2:	35 83       	std	Z+5, r19	; 0x05
         break;
    19c4:	0a c0       	rjmp	.+20     	; 0x19da <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    19c6:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    19c8:	40 1b       	sub	r20, r16
    19ca:	51 0b       	sbc	r21, r17
    19cc:	62 0b       	sbc	r22, r18
    19ce:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    19d0:	ed 91       	ld	r30, X+
    19d2:	fc 91       	ld	r31, X
    19d4:	11 97       	sbiw	r26, 0x01	; 1
    19d6:	30 97       	sbiw	r30, 0x00	; 0
    19d8:	01 f7       	brne	.-64     	; 0x199a <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    19da:	4a 83       	std	Y+2, r20	; 0x02
    19dc:	5b 83       	std	Y+3, r21	; 0x03
    19de:	6c 83       	std	Y+4, r22	; 0x04
    19e0:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    19e2:	10 97       	sbiw	r26, 0x00	; 0
    19e4:	41 f0       	breq	.+16     	; 0x19f6 <placeTimer+0x94>
    {
      timer->next = prev->next;
    19e6:	8d 91       	ld	r24, X+
    19e8:	9c 91       	ld	r25, X
    19ea:	11 97       	sbiw	r26, 0x01	; 1
    19ec:	99 83       	std	Y+1, r25	; 0x01
    19ee:	88 83       	st	Y, r24
      prev->next = timer;
    19f0:	cd 93       	st	X+, r28
    19f2:	dc 93       	st	X, r29
    19f4:	15 c0       	rjmp	.+42     	; 0x1a20 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    19f6:	99 83       	std	Y+1, r25	; 0x01
    19f8:	88 83       	st	Y, r24
      timers = timer;
    19fa:	d0 93 f4 19 	sts	0x19F4, r29	; 0x8019f4 <timers+0x1>
    19fe:	c0 93 f3 19 	sts	0x19F3, r28	; 0x8019f3 <timers>
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1a04:	19 82       	std	Y+1, r1	; 0x01
    1a06:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1a08:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0c:	a8 85       	ldd	r26, Y+8	; 0x08
    1a0e:	b9 85       	ldd	r27, Y+9	; 0x09
    1a10:	8a 83       	std	Y+2, r24	; 0x02
    1a12:	9b 83       	std	Y+3, r25	; 0x03
    1a14:	ac 83       	std	Y+4, r26	; 0x04
    1a16:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1a18:	d0 93 f4 19 	sts	0x19F4, r29	; 0x8019f4 <timers+0x1>
    1a1c:	c0 93 f3 19 	sts	0x19F3, r28	; 0x8019f3 <timers>
  }
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1a2a:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <timers+0x1>
    1a2e:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <timers>
    1a32:	08 95       	ret

00001a34 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a38:	a0 91 f3 19 	lds	r26, 0x19F3	; 0x8019f3 <timers>
    1a3c:	b0 91 f4 19 	lds	r27, 0x19F4	; 0x8019f4 <timers+0x1>
    1a40:	10 97       	sbiw	r26, 0x00	; 0
    1a42:	91 f1       	breq	.+100    	; 0x1aa8 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    1a44:	a8 17       	cp	r26, r24
    1a46:	b9 07       	cpc	r27, r25
    1a48:	51 f5       	brne	.+84     	; 0x1a9e <SYS_TimerStop+0x6a>
    1a4a:	0a c0       	rjmp	.+20     	; 0x1a60 <SYS_TimerStop+0x2c>
    1a4c:	8e 17       	cp	r24, r30
    1a4e:	9f 07       	cpc	r25, r31
    1a50:	29 f5       	brne	.+74     	; 0x1a9c <SYS_TimerStop+0x68>
    {
      if (prev)
    1a52:	10 97       	sbiw	r26, 0x00	; 0
    1a54:	31 f0       	breq	.+12     	; 0x1a62 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    1a56:	20 81       	ld	r18, Z
    1a58:	31 81       	ldd	r19, Z+1	; 0x01
    1a5a:	2d 93       	st	X+, r18
    1a5c:	3c 93       	st	X, r19
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a60:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    1a62:	20 81       	ld	r18, Z
    1a64:	31 81       	ldd	r19, Z+1	; 0x01
    1a66:	30 93 f4 19 	sts	0x19F4, r19	; 0x8019f4 <timers+0x1>
    1a6a:	20 93 f3 19 	sts	0x19F3, r18	; 0x8019f3 <timers>

      if (t->next)
    1a6e:	01 90       	ld	r0, Z+
    1a70:	f0 81       	ld	r31, Z
    1a72:	e0 2d       	mov	r30, r0
    1a74:	30 97       	sbiw	r30, 0x00	; 0
    1a76:	c1 f0       	breq	.+48     	; 0x1aa8 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    1a78:	42 81       	ldd	r20, Z+2	; 0x02
    1a7a:	53 81       	ldd	r21, Z+3	; 0x03
    1a7c:	64 81       	ldd	r22, Z+4	; 0x04
    1a7e:	75 81       	ldd	r23, Z+5	; 0x05
    1a80:	ec 01       	movw	r28, r24
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	9b 81       	ldd	r25, Y+3	; 0x03
    1a86:	ac 81       	ldd	r26, Y+4	; 0x04
    1a88:	bd 81       	ldd	r27, Y+5	; 0x05
    1a8a:	84 0f       	add	r24, r20
    1a8c:	95 1f       	adc	r25, r21
    1a8e:	a6 1f       	adc	r26, r22
    1a90:	b7 1f       	adc	r27, r23
    1a92:	82 83       	std	Z+2, r24	; 0x02
    1a94:	93 83       	std	Z+3, r25	; 0x03
    1a96:	a4 83       	std	Z+4, r26	; 0x04
    1a98:	b5 83       	std	Z+5, r27	; 0x05
    1a9a:	06 c0       	rjmp	.+12     	; 0x1aa8 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1a9c:	df 01       	movw	r26, r30
    1a9e:	ed 91       	ld	r30, X+
    1aa0:	fc 91       	ld	r31, X
    1aa2:	11 97       	sbiw	r26, 0x01	; 1
    1aa4:	30 97       	sbiw	r30, 0x00	; 0
    1aa6:	91 f6       	brne	.-92     	; 0x1a4c <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1aae:	e0 91 f3 19 	lds	r30, 0x19F3	; 0x8019f3 <timers>
    1ab2:	f0 91 f4 19 	lds	r31, 0x19F4	; 0x8019f4 <timers+0x1>
    1ab6:	30 97       	sbiw	r30, 0x00	; 0
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <SYS_TimerStarted+0x28>
    if (t == timer)
    1aba:	e8 17       	cp	r30, r24
    1abc:	f9 07       	cpc	r31, r25
    1abe:	21 f4       	brne	.+8      	; 0x1ac8 <SYS_TimerStarted+0x1a>
    1ac0:	0c c0       	rjmp	.+24     	; 0x1ada <SYS_TimerStarted+0x2c>
    1ac2:	8e 17       	cp	r24, r30
    1ac4:	9f 07       	cpc	r25, r31
    1ac6:	59 f0       	breq	.+22     	; 0x1ade <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1ac8:	01 90       	ld	r0, Z+
    1aca:	f0 81       	ld	r31, Z
    1acc:	e0 2d       	mov	r30, r0
    1ace:	30 97       	sbiw	r30, 0x00	; 0
    1ad0:	c1 f7       	brne	.-16     	; 0x1ac2 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	08 95       	ret
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	08 95       	ret
    1ade:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1ae0:	08 95       	ret

00001ae2 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1ae8:	e2 df       	rcall	.-60     	; 0x1aae <SYS_TimerStarted>
    1aea:	81 11       	cpse	r24, r1
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <SYS_TimerStart+0x10>
    placeTimer(timer);
    1aee:	ce 01       	movw	r24, r28
    1af0:	38 df       	rcall	.-400    	; 0x1962 <placeTimer>
}
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1af8:	cf 92       	push	r12
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1b04:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <halTimerIrqCount>
    1b08:	88 23       	and	r24, r24
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <SYS_TimerTaskHandler+0x16>
    1b0c:	59 c0       	rjmp	.+178    	; 0x1bc0 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1b0e:	8f b7       	in	r24, 0x3f	; 63
    1b10:	f8 94       	cli
    cnt = halTimerIrqCount;
    1b12:	c0 90 f5 19 	lds	r12, 0x19F5	; 0x8019f5 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1b16:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1b1a:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1b1c:	d1 2c       	mov	r13, r1
    1b1e:	e1 2c       	mov	r14, r1
    1b20:	f1 2c       	mov	r15, r1
    1b22:	cc 0c       	add	r12, r12
    1b24:	dd 1c       	adc	r13, r13
    1b26:	ee 1c       	adc	r14, r14
    1b28:	ff 1c       	adc	r15, r15
    1b2a:	d7 01       	movw	r26, r14
    1b2c:	c6 01       	movw	r24, r12
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	aa 1f       	adc	r26, r26
    1b34:	bb 1f       	adc	r27, r27
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	aa 1f       	adc	r26, r26
    1b3c:	bb 1f       	adc	r27, r27
    1b3e:	c8 0e       	add	r12, r24
    1b40:	d9 1e       	adc	r13, r25
    1b42:	ea 1e       	adc	r14, r26
    1b44:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1b46:	c0 91 f3 19 	lds	r28, 0x19F3	; 0x8019f3 <timers>
    1b4a:	d0 91 f4 19 	lds	r29, 0x19F4	; 0x8019f4 <timers+0x1>
    1b4e:	20 97       	sbiw	r28, 0x00	; 0
    1b50:	b9 f1       	breq	.+110    	; 0x1bc0 <SYS_TimerTaskHandler+0xc8>
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	ac 81       	ldd	r26, Y+4	; 0x04
    1b58:	bd 81       	ldd	r27, Y+5	; 0x05
    1b5a:	c8 16       	cp	r12, r24
    1b5c:	d9 06       	cpc	r13, r25
    1b5e:	ea 06       	cpc	r14, r26
    1b60:	fb 06       	cpc	r15, r27
    1b62:	10 f1       	brcs	.+68     	; 0x1ba8 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1b64:	c8 1a       	sub	r12, r24
    1b66:	d9 0a       	sbc	r13, r25
    1b68:	ea 0a       	sbc	r14, r26
    1b6a:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1b6c:	88 81       	ld	r24, Y
    1b6e:	99 81       	ldd	r25, Y+1	; 0x01
    1b70:	90 93 f4 19 	sts	0x19F4, r25	; 0x8019f4 <timers+0x1>
    1b74:	80 93 f3 19 	sts	0x19F3, r24	; 0x8019f3 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1b78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	11 f4       	brne	.+4      	; 0x1b82 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    1b7e:	ce 01       	movw	r24, r28
    1b80:	f0 de       	rcall	.-544    	; 0x1962 <placeTimer>
    timer->handler(timer);
    1b82:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b84:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b86:	ce 01       	movw	r24, r28
    1b88:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1b8a:	c0 91 f3 19 	lds	r28, 0x19F3	; 0x8019f3 <timers>
    1b8e:	d0 91 f4 19 	lds	r29, 0x19F4	; 0x8019f4 <timers+0x1>
    1b92:	20 97       	sbiw	r28, 0x00	; 0
    1b94:	a9 f0       	breq	.+42     	; 0x1bc0 <SYS_TimerTaskHandler+0xc8>
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	ac 81       	ldd	r26, Y+4	; 0x04
    1b9c:	bd 81       	ldd	r27, Y+5	; 0x05
    1b9e:	c8 16       	cp	r12, r24
    1ba0:	d9 06       	cpc	r13, r25
    1ba2:	ea 06       	cpc	r14, r26
    1ba4:	fb 06       	cpc	r15, r27
    1ba6:	f0 f6       	brcc	.-68     	; 0x1b64 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bac:	ac 81       	ldd	r26, Y+4	; 0x04
    1bae:	bd 81       	ldd	r27, Y+5	; 0x05
    1bb0:	8c 19       	sub	r24, r12
    1bb2:	9d 09       	sbc	r25, r13
    1bb4:	ae 09       	sbc	r26, r14
    1bb6:	bf 09       	sbc	r27, r15
    1bb8:	8a 83       	std	Y+2, r24	; 0x02
    1bba:	9b 83       	std	Y+3, r25	; 0x03
    1bbc:	ac 83       	std	Y+4, r26	; 0x04
    1bbe:	bd 83       	std	Y+5, r27	; 0x05
}
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	df 90       	pop	r13
    1bca:	cf 90       	pop	r12
    1bcc:	08 95       	ret

00001bce <__udivmodsi4>:
    1bce:	a1 e2       	ldi	r26, 0x21	; 33
    1bd0:	1a 2e       	mov	r1, r26
    1bd2:	aa 1b       	sub	r26, r26
    1bd4:	bb 1b       	sub	r27, r27
    1bd6:	fd 01       	movw	r30, r26
    1bd8:	0d c0       	rjmp	.+26     	; 0x1bf4 <__udivmodsi4_ep>

00001bda <__udivmodsi4_loop>:
    1bda:	aa 1f       	adc	r26, r26
    1bdc:	bb 1f       	adc	r27, r27
    1bde:	ee 1f       	adc	r30, r30
    1be0:	ff 1f       	adc	r31, r31
    1be2:	a2 17       	cp	r26, r18
    1be4:	b3 07       	cpc	r27, r19
    1be6:	e4 07       	cpc	r30, r20
    1be8:	f5 07       	cpc	r31, r21
    1bea:	20 f0       	brcs	.+8      	; 0x1bf4 <__udivmodsi4_ep>
    1bec:	a2 1b       	sub	r26, r18
    1bee:	b3 0b       	sbc	r27, r19
    1bf0:	e4 0b       	sbc	r30, r20
    1bf2:	f5 0b       	sbc	r31, r21

00001bf4 <__udivmodsi4_ep>:
    1bf4:	66 1f       	adc	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	1a 94       	dec	r1
    1bfe:	69 f7       	brne	.-38     	; 0x1bda <__udivmodsi4_loop>
    1c00:	60 95       	com	r22
    1c02:	70 95       	com	r23
    1c04:	80 95       	com	r24
    1c06:	90 95       	com	r25
    1c08:	9b 01       	movw	r18, r22
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	bd 01       	movw	r22, r26
    1c0e:	cf 01       	movw	r24, r30
    1c10:	08 95       	ret

00001c12 <do_rand>:
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	ec 01       	movw	r28, r24
    1c28:	68 81       	ld	r22, Y
    1c2a:	79 81       	ldd	r23, Y+1	; 0x01
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c30:	61 15       	cp	r22, r1
    1c32:	71 05       	cpc	r23, r1
    1c34:	81 05       	cpc	r24, r1
    1c36:	91 05       	cpc	r25, r1
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <do_rand+0x30>
    1c3a:	64 e2       	ldi	r22, 0x24	; 36
    1c3c:	79 ed       	ldi	r23, 0xD9	; 217
    1c3e:	8b e5       	ldi	r24, 0x5B	; 91
    1c40:	97 e0       	ldi	r25, 0x07	; 7
    1c42:	2d e1       	ldi	r18, 0x1D	; 29
    1c44:	33 ef       	ldi	r19, 0xF3	; 243
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	41 d0       	rcall	.+130    	; 0x1cce <__divmodsi4>
    1c4c:	49 01       	movw	r8, r18
    1c4e:	5a 01       	movw	r10, r20
    1c50:	9b 01       	movw	r18, r22
    1c52:	ac 01       	movw	r20, r24
    1c54:	a7 ea       	ldi	r26, 0xA7	; 167
    1c56:	b1 e4       	ldi	r27, 0x41	; 65
    1c58:	56 d0       	rcall	.+172    	; 0x1d06 <__muluhisi3>
    1c5a:	6b 01       	movw	r12, r22
    1c5c:	7c 01       	movw	r14, r24
    1c5e:	ac ee       	ldi	r26, 0xEC	; 236
    1c60:	b4 ef       	ldi	r27, 0xF4	; 244
    1c62:	a5 01       	movw	r20, r10
    1c64:	94 01       	movw	r18, r8
    1c66:	5b d0       	rcall	.+182    	; 0x1d1e <__mulohisi3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8c 0d       	add	r24, r12
    1c6e:	9d 1d       	adc	r25, r13
    1c70:	ae 1d       	adc	r26, r14
    1c72:	bf 1d       	adc	r27, r15
    1c74:	b7 ff       	sbrs	r27, 7
    1c76:	03 c0       	rjmp	.+6      	; 0x1c7e <do_rand+0x6c>
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	a1 09       	sbc	r26, r1
    1c7c:	b0 48       	sbci	r27, 0x80	; 128
    1c7e:	88 83       	st	Y, r24
    1c80:	99 83       	std	Y+1, r25	; 0x01
    1c82:	aa 83       	std	Y+2, r26	; 0x02
    1c84:	bb 83       	std	Y+3, r27	; 0x03
    1c86:	9f 77       	andi	r25, 0x7F	; 127
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	df 90       	pop	r13
    1c92:	cf 90       	pop	r12
    1c94:	bf 90       	pop	r11
    1c96:	af 90       	pop	r10
    1c98:	9f 90       	pop	r9
    1c9a:	8f 90       	pop	r8
    1c9c:	08 95       	ret

00001c9e <rand_r>:
    1c9e:	b9 cf       	rjmp	.-142    	; 0x1c12 <do_rand>

00001ca0 <rand>:
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	92 e0       	ldi	r25, 0x02	; 2
    1ca4:	b6 cf       	rjmp	.-148    	; 0x1c12 <do_rand>

00001ca6 <srand>:
    1ca6:	a0 e0       	ldi	r26, 0x00	; 0
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1cae:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1cb2:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1cb6:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1cba:	08 95       	ret

00001cbc <memcpy>:
    1cbc:	fb 01       	movw	r30, r22
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <memcpy+0xa>
    1cc2:	01 90       	ld	r0, Z+
    1cc4:	0d 92       	st	X+, r0
    1cc6:	41 50       	subi	r20, 0x01	; 1
    1cc8:	50 40       	sbci	r21, 0x00	; 0
    1cca:	d8 f7       	brcc	.-10     	; 0x1cc2 <memcpy+0x6>
    1ccc:	08 95       	ret

00001cce <__divmodsi4>:
    1cce:	05 2e       	mov	r0, r21
    1cd0:	97 fb       	bst	r25, 7
    1cd2:	16 f4       	brtc	.+4      	; 0x1cd8 <__divmodsi4+0xa>
    1cd4:	00 94       	com	r0
    1cd6:	0f d0       	rcall	.+30     	; 0x1cf6 <__negsi2>
    1cd8:	57 fd       	sbrc	r21, 7
    1cda:	05 d0       	rcall	.+10     	; 0x1ce6 <__divmodsi4_neg2>
    1cdc:	78 df       	rcall	.-272    	; 0x1bce <__udivmodsi4>
    1cde:	07 fc       	sbrc	r0, 7
    1ce0:	02 d0       	rcall	.+4      	; 0x1ce6 <__divmodsi4_neg2>
    1ce2:	46 f4       	brtc	.+16     	; 0x1cf4 <__divmodsi4_exit>
    1ce4:	08 c0       	rjmp	.+16     	; 0x1cf6 <__negsi2>

00001ce6 <__divmodsi4_neg2>:
    1ce6:	50 95       	com	r21
    1ce8:	40 95       	com	r20
    1cea:	30 95       	com	r19
    1cec:	21 95       	neg	r18
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	4f 4f       	sbci	r20, 0xFF	; 255
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255

00001cf4 <__divmodsi4_exit>:
    1cf4:	08 95       	ret

00001cf6 <__negsi2>:
    1cf6:	90 95       	com	r25
    1cf8:	80 95       	com	r24
    1cfa:	70 95       	com	r23
    1cfc:	61 95       	neg	r22
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1d00:	8f 4f       	sbci	r24, 0xFF	; 255
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	08 95       	ret

00001d06 <__muluhisi3>:
    1d06:	0f d0       	rcall	.+30     	; 0x1d26 <__umulhisi3>
    1d08:	a5 9f       	mul	r26, r21
    1d0a:	90 0d       	add	r25, r0
    1d0c:	b4 9f       	mul	r27, r20
    1d0e:	90 0d       	add	r25, r0
    1d10:	a4 9f       	mul	r26, r20
    1d12:	80 0d       	add	r24, r0
    1d14:	91 1d       	adc	r25, r1
    1d16:	11 24       	eor	r1, r1
    1d18:	08 95       	ret

00001d1a <__mulshisi3>:
    1d1a:	b7 ff       	sbrs	r27, 7
    1d1c:	f4 cf       	rjmp	.-24     	; 0x1d06 <__muluhisi3>

00001d1e <__mulohisi3>:
    1d1e:	f3 df       	rcall	.-26     	; 0x1d06 <__muluhisi3>
    1d20:	82 1b       	sub	r24, r18
    1d22:	93 0b       	sbc	r25, r19
    1d24:	08 95       	ret

00001d26 <__umulhisi3>:
    1d26:	a2 9f       	mul	r26, r18
    1d28:	b0 01       	movw	r22, r0
    1d2a:	b3 9f       	mul	r27, r19
    1d2c:	c0 01       	movw	r24, r0
    1d2e:	a3 9f       	mul	r26, r19
    1d30:	70 0d       	add	r23, r0
    1d32:	81 1d       	adc	r24, r1
    1d34:	11 24       	eor	r1, r1
    1d36:	91 1d       	adc	r25, r1
    1d38:	b2 9f       	mul	r27, r18
    1d3a:	70 0d       	add	r23, r0
    1d3c:	81 1d       	adc	r24, r1
    1d3e:	11 24       	eor	r1, r1
    1d40:	91 1d       	adc	r25, r1
    1d42:	08 95       	ret

00001d44 <_exit>:
    1d44:	f8 94       	cli

00001d46 <__stop_program>:
    1d46:	ff cf       	rjmp	.-2      	; 0x1d46 <__stop_program>
